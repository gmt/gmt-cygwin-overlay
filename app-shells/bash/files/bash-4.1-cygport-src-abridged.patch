diff -urN bash-4.2.orig/bashline.c bash-4.2/bashline.c
--- bash-4.2.orig/bashline.c	2011-01-16 12:32:47.000000000 -0800
+++ bash-4.2/bashline.c	2012-02-21 04:42:55.379761200 -0800
@@ -240,6 +240,11 @@
    are the only possible matches, even if FIGNORE says to. */
 int force_fignore = 1;
 
+#if __CYGWIN__
+/* If set, shorten "foo.exe" to "foo" when they are the same file.  */
+int completion_strip_exe;
+#endif /* __CYGWIN__ */
+
 /* Perform spelling correction on directory names during word completion */
 int dircomplete_spelling = 0;
 
@@ -1843,6 +1851,14 @@
       /* If we have found a match, and it is an executable file or a
 	 directory name, return it. */
       if (match && executable_or_directory (val))
+#elif __CYGWIN__
+      /* executable_or_directory will do the right thing on //server,
+	 but calling stat("//server") is an order of magnitude slower
+	 than noting that readdir("//") only returns directories.  */
+      if (match && (searching_path ? executable_file (val)
+		    : ((val[0] == '/' && val[1] == '/'
+			&& ! strchr (&val[2], '/'))
+		       || executable_or_directory (val))))
 #else
       /* If we have found a match, and it is an executable file, return it.
 	 We don't return directory names when searching $PATH, since the
@@ -1852,6 +1868,21 @@
       if (match && (searching_path ? executable_file (val) : executable_or_directory (val)))
 #endif
 	{
+#if __CYGWIN__
+          if (completion_strip_exe)
+            {
+              int val_len = strlen (val);
+              char *candidate;
+              if (val_len > 4 && !strcasecmp (&val[val_len - 4], ".exe")
+                  && (candidate = strdup (val)))
+                {
+                  candidate[val_len - 4] = '\0';
+                  if (same_file (val, candidate, NULL, NULL))
+                    temp[strlen (temp) - 4] = '\0';
+                  free (candidate);
+                }
+            }
+#endif
 	  free (val);
 	  val = "";		/* So it won't be NULL. */
 	  return (temp);
@@ -2583,6 +2614,17 @@
   int r;
 
   fn = bash_tilde_expand (name, 0);
+#if __CYGWIN__
+  /* stat("//server") can only be successful as a directory, but takes
+     a several-second timeout to fail.  It is much faster to assume
+     that //server is a valid name than it is to wait for the stat,
+     even though it gives false positives on bad names.  */
+  if (fn[0] == '/' && fn[1] == '/' && ! strchr (&fn[2], '/'))
+    {
+      free (fn);
+      return 1;
+    }
+#endif /* __CYGWIN__ */
   r = file_isdir (fn);
   free (fn);
 
diff -urN bash-4.2.orig/builtins/set.def bash-4.2/builtins/set.def
--- bash-4.2.orig/builtins/set.def	2011-01-10 06:22:25.000000000 -0800
+++ bash-4.2/builtins/set.def	2012-02-21 04:42:58.620409200 -0800
@@ -56,6 +56,13 @@
 #if defined (READLINE)
 extern int no_line_editing;
 #endif /* READLINE */
+#if __CYGWIN__
+extern int igncr;
+static int set_minus_o_option_maybe (int, const char *, int);
+# define INTERACTIVE_ONLY ,1
+#else /* ! __CYGWIN__ */
+# define INTERACTIVE_ONLY
+#endif
 
 $BUILTIN set
 $FUNCTION set_builtin
@@ -92,6 +99,9 @@
 #if defined (HISTORY)
           history      enable command history
 #endif
+#if __CYGWIN__
+          igncr        on cygwin, ignore \r in line endings
+#endif
           ignoreeof    the shell will not exit upon reading EOF
           interactive-comments
                        allow comments to appear in interactive commands
@@ -184,28 +194,40 @@
   int *variable;
   setopt_set_func_t *set_func;
   setopt_get_func_t *get_func;
+#if __CYGWIN__
+  /* Cygwin users have taken to exporting SHELLOPTS for the
+     cygwin-specific igncr.  As a result, we need to make sure
+     SHELLOPTS parsing does not turn on interactive options when
+     exported from an interactive shell, but parsed in a
+     non-interactive setting, since some interactive options violate
+     POSIX /bin/sh rules.  */
+  int interactive_only;
+#endif /* __CYGWIN__ */
 } o_options[] = {
   { "allexport",  'a', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL },
 #if defined (BRACE_EXPANSION)
   { "braceexpand",'B', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
 #endif
 #if defined (READLINE)
-  { "emacs",     '\0', (int *)NULL, set_edit_mode, get_edit_mode },
+  { "emacs",     '\0', (int *)NULL, set_edit_mode, get_edit_mode INTERACTIVE_ONLY},
 #endif
   { "errexit",	  'e', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
   { "errtrace",	  'E', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
   { "functrace",  'T', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
   { "hashall",    'h', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
 #if defined (BANG_HISTORY)
-  { "histexpand", 'H', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
+  { "histexpand", 'H', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  INTERACTIVE_ONLY},
 #endif /* BANG_HISTORY */
 #if defined (HISTORY)
-  { "history",   '\0', &enable_history_list, bash_set_history, (setopt_get_func_t *)NULL },
+  { "history",   '\0', &enable_history_list, bash_set_history, (setopt_get_func_t *)NULL INTERACTIVE_ONLY},
+#endif
+#if __CYGWIN__
+  { "igncr", '\0', &igncr, NULL, (setopt_get_func_t *)NULL },
 #endif
   { "ignoreeof", '\0', &ignoreeof, set_ignoreeof, (setopt_get_func_t *)NULL },
   { "interactive-comments", '\0', &interactive_comments, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL },
   { "keyword",    'k', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
-  { "monitor",	  'm', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
+  { "monitor",	  'm', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  INTERACTIVE_ONLY},
   { "noclobber",  'C', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
   { "noexec",	  'n', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
   { "noglob",	  'f', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
@@ -223,7 +245,7 @@
   { "privileged", 'p', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
   { "verbose",	  'v', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
 #if defined (READLINE)
-  { "vi",        '\0', (int *)NULL, set_edit_mode, get_edit_mode },
+  { "vi",        '\0', (int *)NULL, set_edit_mode, get_edit_mode INTERACTIVE_ONLY},
 #endif
   { "xtrace",	  'x', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
   {(char *)NULL, 0 , (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL },
@@ -410,6 +432,15 @@
 set_minus_o_option (on_or_off, option_name)
      int on_or_off;
      char *option_name;
+#if __CYGWIN__
+{
+  /* See cygwin comments above.  */
+  return set_minus_o_option_maybe (on_or_off, option_name, 0);
+}
+static int
+set_minus_o_option_maybe (int on_or_off, const char *option_name,
+			  int avoid_interactive)
+#endif /* __CYGWIN__ */
 {
   register int i;
 
@@ -417,6 +448,10 @@
     {
       if (STREQ (option_name, o_options[i].name))
 	{
+#if __CYGWIN__
+	  if (o_options[i].interactive_only && avoid_interactive)
+	    return EXECUTION_SUCCESS;
+#endif /* __CYGWIN__ */
 	  if (o_options[i].letter == 0)
 	    {
 	      SET_BINARY_O_OPTION_VALUE (i, on_or_off, option_name);
@@ -542,7 +577,11 @@
   vptr = 0;
   while (vname = extract_colon_unit (value, &vptr))
     {
+#if __CYGWIN__
+    set_minus_o_option_maybe (FLAG_ON, vname, !interactive_shell);
+#else /* !__CYGWIN__ */
       set_minus_o_option (FLAG_ON, vname);
+#endif
       free (vname);
     }
 }
diff -urN bash-4.2.orig/builtins/shopt.def bash-4.2/builtins/shopt.def
--- bash-4.2.orig/builtins/shopt.def	2010-07-02 19:42:44.000000000 -0700
+++ bash-4.2/builtins/shopt.def	2012-02-21 04:57:22.881226800 -0800
@@ -86,6 +86,10 @@
 extern int glob_star;
 extern int lastpipe_opt;
 
+#if __CYGWIN__
+extern int completion_strip_exe;
+#endif
+
 #if defined (EXTENDED_GLOB)
 extern int extended_glob;
 #endif
@@ -149,6 +153,9 @@
   { "compat32", &shopt_compat32, set_compatibility_level },
   { "compat40", &shopt_compat40, set_compatibility_level },
   { "compat41", &shopt_compat41, set_compatibility_level },
+#if __CYGWIN__
+   { "completion_strip_exe", &completion_strip_exe, NULL },
+#endif
 #if defined (READLINE)
   { "dirspell", &dircomplete_spelling, (shopt_set_func_t *)NULL },
 #endif
diff -urN bash-4.2.orig/doc/bash.1 bash-4.2/doc/bash.1
--- bash-4.2.orig/doc/bash.1	2011-01-16 12:31:39.000000000 -0800
+++ bash-4.2/doc/bash.1	2012-02-21 04:42:59.109006900 -0800
@@ -1592,6 +1592,14 @@
 Expands to the effective user ID of the current user, initialized at
 shell startup.  This variable is readonly.
 .TP
+.B EXECIGNORE
+A colon-separated list of extended glob (see \fBPattern Matching\fP)
+patterns. Files with full paths matching one of these patterns are
+not considered executable for the purposes of completion and PATH
+searching, but the \fB[\fP, \fB[[\fP, and \fBtest\fP builtins are not
+affected. Use this variable to deal with systems that set the
+executable bit on files that are not actually executable.
+.TP
 .B FUNCNAME
 An array variable containing the names of all shell functions
 currently in the execution call stack.
@@ -8954,6 +8962,10 @@
 attempts spelling correction on directory names during word completion
 if the directory name initially supplied does not exist.
 .TP 8
+.B completion_strip_exe
+If set, whenever bash sees `foo.exe' during completion, it checks if
+`foo' is the same file and strips the suffix.
+.TP 8
 .B dotglob
 If set, 
 .B bash
diff -urN bash-4.2.orig/doc/bashref.texi bash-4.2/doc/bashref.texi
--- bash-4.2.orig/doc/bashref.texi	2011-01-16 12:31:57.000000000 -0800
+++ bash-4.2/doc/bashref.texi	2012-02-21 04:42:59.126010300 -0800
@@ -4535,6 +4535,10 @@
 quoted.  This is the behavior of @sc{posix} mode through version 4.1.
 The default Bash behavior remains as in previous versions.
 
+@item completion_strip_exe
+If set, whenever bash sees `foo.exe' during completion, it checks if
+`foo' is the same file and strips the suffix.
+
 @item dirspell
 If set, Bash
 attempts spelling correction on directory names during word completion 
@@ -5080,6 +5084,14 @@
 The numeric effective user id of the current user.  This variable
 is readonly.
 
+@item EXECIGNORE
+A colon-separated list of extended glob ((@pxref{Pattern Matching})
+patterns. Files with full paths matching one of these patterns are
+not considered executable for the purposes of completion and PATH
+searching, but the @code{[}, @code{[[}, and @code{test} builtins are
+not affected. Use this variable to deal with systems that set the
+executable bit on files that are not actually executable.
+
 @item FCEDIT
 The editor used as a default by the @option{-e} option to the @code{fc}
 builtin command.
diff -urN bash-4.2.orig/doc/builtins.1 bash-4.2/doc/builtins.1
--- bash-4.2.orig/doc/builtins.1	2008-08-12 06:24:40.000000000 -0700
+++ bash-4.2/doc/builtins.1	2012-02-21 04:42:59.129010900 -0800
@@ -12,6 +12,6 @@
 ulimit, umask, unalias, unset, wait \- bash built-in commands, see \fBbash\fR(1)
 .SH BASH BUILTIN COMMANDS
 .nr zZ 1
-.so bash.1
+.so man1/bash.1
 .SH SEE ALSO
 bash(1), sh(1)
diff -urN bash-4.2.orig/doc/Makefile.in bash-4.2/doc/Makefile.in
--- bash-4.2.orig/doc/Makefile.in	2010-01-15 11:23:36.000000000 -0800
+++ bash-4.2/doc/Makefile.in	2012-02-21 04:42:59.099505000 -0800
@@ -170,7 +170,7 @@
 	$(TEXI2HTML) -menu -monolithic -I $(TEXINPUTDIR) $(srcdir)/bashref.texi
 
 bash.info: bashref.info
-	${SHELL} ${INFOPOST} < $(srcdir)/bashref.info > $@ ; \
+	${SHELL} ${INFOPOST} < bashref.info > $@ ; \
 
 bash.txt: bash.1
 bash.ps: bash.1
@@ -226,9 +226,9 @@
 	-$(INSTALL_DATA) $(srcdir)/bash.1 $(DESTDIR)$(man1dir)/bash${man1ext}
 	-$(INSTALL_DATA) $(srcdir)/bashbug.1 $(DESTDIR)$(man1dir)/bashbug${man1ext}
 # uncomment the next lines to install the builtins man page
-#	sed 's:bash\.1:man1/&:' $(srcdir)/builtins.1 > $${TMPDIR:-/var/tmp}/builtins.1
-#	-$(INSTALL_DATA) $${TMPDIR:-/var/tmp}/builtins.1 $(DESTDIR)$(man1dir)/bash_builtins${man1ext}
-#	-$(RM) $${TMPDIR:-/var/tmp}/builtins.1
+	sed 's:bash\.1:man1/&:' $(srcdir)/builtins.1 > $${TMPDIR:-/var/tmp}/builtins.1
+	-$(INSTALL_DATA) $${TMPDIR:-/var/tmp}/builtins.1 $(DESTDIR)$(man1dir)/bash_builtins${man1ext}
+	-$(RM) $${TMPDIR:-/var/tmp}/builtins.1
 	-if test -f bash.info; then d=.; else d=$(srcdir); fi; \
 	  $(INSTALL_DATA) $$d/bash.info $(DESTDIR)$(infodir)/bash.info
 # run install-info if it is present to update the info directory
diff -urN bash-4.2.orig/execute_cmd.c bash-4.2/execute_cmd.c
--- bash-4.2.orig/execute_cmd.c	2011-02-09 14:32:25.000000000 -0800
+++ bash-4.2/execute_cmd.c	2012-02-21 04:42:59.139513000 -0800
@@ -5034,6 +5034,13 @@
 	  internal_error (_("%s: cannot execute binary file"), command);
 	  return (EX_BINARY_FILE);
 	}
+#if __CYGWIN__
+      extern int sh_setlinebuf (FILE *);
+      /* Let stdio know that fd may have changed from text to binary.  */
+      freopen (NULL, "w", stdout);
+      /* Bash builtins (foolishly) rely on line-buffering. */
+      sh_setlinebuf (stdout);
+#endif /* __CYGWIN__ */
     }
 
   /* We have committed to attempting to execute the contents of this file
diff -urN bash-4.2.orig/findcmd.c bash-4.2/findcmd.c
--- bash-4.2.orig/findcmd.c	2010-10-06 14:38:40.000000000 -0700
+++ bash-4.2/findcmd.c	2012-02-21 04:42:59.147014500 -0800
@@ -48,6 +48,8 @@
 extern int errno;
 #endif
 
+#include <glob/strmatch.h>
+
 extern int posixly_correct;
 
 /* Static functions defined and used in this file. */
@@ -76,6 +78,38 @@
    containing the file of interest. */
 int dot_found_in_search = 0;
 
+static struct ignorevar execignore =
+{
+  "EXECIGNORE",
+  (struct ign *)0,
+  0,
+  (char *)0,
+  (sh_iv_item_func_t *)0,
+};
+
+void
+setup_exec_ignore (char *varname)
+{
+  setup_ignore_patterns (&execignore);
+}
+
+/* Return whether we should never consider file executable
+ * even if the system tells us it is. */
+static int
+is_on_exec_blacklist (char *name)
+{
+  struct ign *p;
+  int flags = FNM_EXTMATCH | FNM_CASEFOLD;
+
+  for (p = execignore.ignores; p && p->val; p++)
+    {
+      if (strmatch (p->val, (char *)name, flags) != FNM_NOMATCH)
+      return (1);
+    }
+
+  return (0);
+}
+
 /* Return some flags based on information about this file.
    The EXISTS bit is non-zero if the file is found.
    The EXECABLE bit is non-zero the file is executble.
@@ -103,7 +137,7 @@
      file access mechanisms into account.  eaccess uses the effective
      user and group IDs, not the real ones.  We could use sh_eaccess,
      but we don't want any special treatment for /dev/fd. */
-  if (eaccess (name, X_OK) == 0)
+  if (!is_on_exec_blacklist (name) && eaccess (name, X_OK) == 0)
     r |= FS_EXECABLE;
   if (eaccess (name, R_OK) == 0)
     r |= FS_READABLE;
diff -urN bash-4.2.orig/findcmd.h bash-4.2/findcmd.h
--- bash-4.2.orig/findcmd.h	2009-01-04 11:32:29.000000000 -0800
+++ bash-4.2/findcmd.h	2012-02-21 04:42:59.150015100 -0800
@@ -31,5 +31,6 @@
 extern char *find_path_file __P((const char *));
 extern char *search_for_command __P((const char *));
 extern char *user_command_matches __P((const char *, int, int));
+extern void setup_exec_ignore __P((char *));
 
 #endif /* _FINDCMD_H_ */
diff -urN bash-4.2.orig/input.c bash-4.2/input.c
--- bash-4.2.orig/input.c	2011-01-02 12:58:57.000000000 -0800
+++ bash-4.2/input.c	2012-02-21 05:06:06.089847600 -0800
@@ -43,6 +43,10 @@
 #include "externs.h"
 #include "quit.h"
 
+#if __CYGWIN__
+int igncr;
+#endif /* __CYGWIN__ */
+
 #if !defined (errno)
 extern int errno;
 #endif /* !errno */
@@ -193,8 +197,13 @@
   bp->b_used = bp->b_inputp = bp->b_flag = 0;
   if (bufsize == 1)
     bp->b_flag |= B_UNBUFF;
+#if __CYGWIN__
+  if ((fcntl (fd, F_GETFL) & O_TEXT) != 0)
+    bp->b_flag |= B_TEXT;
+#else
   if (O_TEXT && (fcntl (fd, F_GETFL) & O_TEXT) != 0)
     bp->b_flag |= O_TEXT;
+#endif /* __CYGWIN__ */
   return (bp);
 }
 
@@ -502,6 +511,15 @@
       return (EOF);
     }
 
+#if defined (__CYGWIN__)
+  /* If on cygwin, translate \r\n to \n. */
+  if (nr >= 2 && bp->b_buffer[nr - 2] == '\r' && bp->b_buffer[nr - 1] == '\n')
+    {
+      bp->b_buffer[nr - 2] = '\n';
+      nr--;
+    }
+#endif
+
   bp->b_used = nr;
   bp->b_inputp = 0;
   return (bp->b_buffer[bp->b_inputp++] & 0xFF);
@@ -550,6 +568,19 @@
 {
   CHECK_TERMSIG;
 
+#if __CYGWIN__
+  /* shopt igncr means to discard carriage returns from input stream.
+     If cr is the only character in the buffer, then recurse to pick
+     up the next character; otherwise flatten the buffer.  */
+  if (igncr)
+    {
+      int ch;
+      while ((ch = bufstream_getc (buffers[bash_input.location.buffered_fd]))
+	     == '\r')
+	;
+      return ch;
+    }
+#endif /* __CYGWIN__ */
 #if !defined (DJGPP)
   return (bufstream_getc (buffers[bash_input.location.buffered_fd]));
 #else
diff -urN bash-4.2.orig/lib/sh/pathcanon.c bash-4.2/lib/sh/pathcanon.c
--- bash-4.2.orig/lib/sh/pathcanon.c	2008-08-12 11:01:37.000000000 -0700
+++ bash-4.2/lib/sh/pathcanon.c	2012-02-21 04:42:59.166518400 -0800
@@ -194,6 +194,8 @@
 	    *q++ = DIRSEP;
 	  while (*p && (ISDIRSEP(*p) == 0))
 	    *q++ = *p++;
+	}
+    }
 	  /* Check here for a valid directory with _path_isdir. */
 	  if (flags & PATH_CHECKEXISTS)
 	    {
@@ -211,8 +213,7 @@
 		}
 	      *q = c;
 	    }
-	}
-    }
+
 
   /* Empty string is really ``.'' or `/', depending on what we started with. */
   if (q == result)
diff -urN bash-4.2.orig/lib/sh/pathphys.c bash-4.2/lib/sh/pathphys.c
--- bash-4.2.orig/lib/sh/pathphys.c	2008-08-12 11:01:23.000000000 -0700
+++ bash-4.2/lib/sh/pathphys.c	2012-02-21 04:42:59.169519000 -0800
@@ -35,6 +35,7 @@
 #include <stdio.h>
 #include <chartypes.h>
 #include <errno.h>
+#include <stdlib.h>
 
 #include "shell.h"
 
@@ -76,6 +77,10 @@
      char *path;
      int flags;
 {
+#if __CYGWIN__
+  /* realpath does this right without all the hassle */
+  return realpath (path, NULL);
+#else
   char tbuf[PATH_MAX+1], linkbuf[PATH_MAX+1];
   char *result, *p, *q, *qsave, *qbase, *workpath;
   int double_slash_path, linklen, nlink;
@@ -249,6 +254,7 @@
     }
 
   return (result);
+#endif /* !__CYGWIN__ */
 }
 
 char *
diff -urN bash-4.2.orig/lib/sh/tmpfile.c bash-4.2/lib/sh/tmpfile.c
--- bash-4.2.orig/lib/sh/tmpfile.c	2011-01-02 12:34:07.000000000 -0800
+++ bash-4.2/lib/sh/tmpfile.c	2012-02-21 04:51:37.550674500 -0800
@@ -94,7 +94,7 @@
   if (tdir && (file_iswdir (tdir) == 0 || strlen (tdir) > PATH_MAX))
     tdir = 0;
 
-  if (tdir == 0)
+  if (tdir == 0 || !file_iswdir (tdir))
     tdir = get_sys_tmpdir ();
 
 #if defined (HAVE_PATHCONF) && defined (_PC_NAME_MAX)
@@ -123,7 +123,8 @@
   lroot = nameroot ? nameroot : DEFAULT_NAMEROOT;
 
 #ifdef USE_MKTEMP
-  sprintf (filename, "%s/%s.XXXXXX", tdir, lroot);
+  if (asprintf (&filename, "%s/%s.XXXXXX", tdir, lroot) < 0)
+    return NULL;
   if (mktemp (filename) == 0)
     {
       free (filename);
@@ -136,7 +137,9 @@
 		(unsigned long) time ((time_t *)0) ^
 		(unsigned long) dollar_dollar_pid ^
 		(unsigned long) ((flags & MT_USERANDOM) ? get_random_number () : ntmpfiles++);
-      sprintf (filename, "%s/%s-%lu", tdir, lroot, filenum);
+      free (filename);
+      if (asprintf (&filename, "%s/%s-%lu", tdir, lroot, filenum) < 0)
+        return NULL;
       if (tmpnamelen > 0 && tmpnamelen < 32)
 	filename[tdlen + 1 + tmpnamelen] = '\0';
 #  ifdef HAVE_LSTAT
@@ -168,7 +171,12 @@
   lroot = nameroot ? nameroot : DEFAULT_NAMEROOT;
 
 #ifdef USE_MKSTEMP
-  sprintf (filename, "%s/%s.XXXXXX", tdir, lroot);
+  if (asprintf (&filename, "%s/%s.XXXXXX", tdir, lroot) < 0)
+  {
+    if (namep)
+      *namep = NULL;
+    return -1;
+  }
   fd = mkstemp (filename);
   if (fd < 0 || namep == 0)
     {
@@ -185,7 +193,13 @@
 		(unsigned long) time ((time_t *)0) ^
 		(unsigned long) dollar_dollar_pid ^
 		(unsigned long) ((flags & MT_USERANDOM) ? get_random_number () : ntmpfiles++);
-      sprintf (filename, "%s/%s-%lu", tdir, lroot, filenum);
+      free (filename);
+      if (asprintf (&filename, "%s/%s-%lu", tdir, lroot, filenum) < 0)
+        {
+          if (namep)
+            *namep = NULL;
+          return -1;
+        }
       if (tmpnamelen > 0 && tmpnamelen < 32)
 	filename[tdlen + 1 + tmpnamelen] = '\0';
       fd = open (filename, BASEOPENFLAGS | ((flags & MT_READWRITE) ? O_RDWR : O_WRONLY), 0600);
diff -urN bash-4.2.orig/parse.y bash-4.2/parse.y
--- bash-4.2.orig/parse.y	2012-02-21 04:37:24.030504600 -0800
+++ bash-4.2/parse.y	2012-02-21 04:43:02.366158200 -0800
@@ -1526,14 +1526,20 @@
   string = bash_input.location.string;
 
   /* If the string doesn't exist, or is empty, EOF found. */
-  if (string && *string)
+  while (string && *string)
     {
       c = *string++;
       bash_input.location.string = string;
+#if __CYGWIN__
+      {
+        extern int igncr;
+        if (igncr && c == '\r')
+          continue;
+      }
+#endif /* __CYGWIN__ */
       return (c);
     }
-  else
-    return (EOF);
+  return (EOF);
 }
 
 static int
diff -urN bash-4.2.orig/pathexp.h bash-4.2/pathexp.h
--- bash-4.2.orig/pathexp.h	2009-01-04 11:32:40.000000000 -0800
+++ bash-4.2/pathexp.h	2012-02-21 04:43:02.371659300 -0800
@@ -86,7 +86,7 @@
 typedef int sh_iv_item_func_t __P((struct ign *));
 
 struct ignorevar {
-  char *varname;	/* FIGNORE or GLOBIGNORE */
+  char *varname;	/* FIGNORE or GLOBIGNORE or EXECIGNORE */
   struct ign *ignores;	/* Store the ignore strings here */
   int num_ignores;	/* How many are there? */
   char *last_ignoreval;	/* Last value of variable - cached for speed */
diff -urN bash-4.2.orig/redir.c bash-4.2/redir.c
--- bash-4.2.orig/redir.c	2011-01-02 13:00:31.000000000 -0800
+++ bash-4.2/redir.c	2012-02-21 05:09:57.448110000 -0800
@@ -456,6 +456,14 @@
       r = errno;
       unlink (filename);
       free (filename);
+#if defined (__CYGWIN__)
+      /* Under CygWin 1.1.0, the unlink will fail if the file is
+         open. This hack will allow the previous action of silently
+         ignoring the error, but will still leave the file there. This
+         needs some kind of magic. */
+      if (r == EACCES)
+        return (fd2);
+#endif /* __CYGWIN__ */
       close (fd);
       errno = r;
       return -1;
diff -urN bash-4.2.orig/shell.c bash-4.2/shell.c
--- bash-4.2.orig/shell.c	2011-01-02 13:04:51.000000000 -0800
+++ bash-4.2/shell.c	2012-02-21 05:11:21.224862000 -0800
@@ -330,7 +330,10 @@
   struct stat sb;
 
   if (stat ("/tmp", &sb) < 0)
-    internal_warning (_("could not find /tmp, please create!"));
+    {
+      if (mkdir ("/tmp", S_IRWXU | S_IRWXG | S_IRWXO | S_ISVTX) != 0)
+        internal_warning (_("could not find /tmp, please create!"));
+    }
   else
     {
       if (S_ISDIR (sb.st_mode) == 0)
@@ -1476,6 +1479,10 @@
      not match with ours. */
   fd = move_to_high_fd (fd, 1, -1);
 
+#if defined (__CYGWIN__) && defined (O_TEXT)
+  setmode (fd, O_TEXT);
+#endif
+
 #if defined (BUFFERED_INPUT)
   default_buffered_input = fd;
   SET_CLOSE_ON_EXEC (default_buffered_input);
diff -urN bash-4.2.orig/subst.c bash-4.2/subst.c
--- bash-4.2.orig/subst.c	2012-02-21 04:37:24.621122700 -0800
+++ bash-4.2/subst.c	2012-02-21 04:55:51.442942800 -0800
@@ -5149,6 +5149,10 @@
   for (skip_ctlesc = skip_ctlnul = 0, s = ifs_value; s && *s; s++)
     skip_ctlesc |= *s == CTLESC, skip_ctlnul |= *s == CTLNUL;
 
+#ifdef __CYGWIN__
+  setmode (fd, O_TEXT);                /* we don't want CR/LF, we want Unix-style */
+#endif
+
   /* Read the output of the command through the pipe.  This may need to be
      changed to understand multibyte characters in the future. */
   while (1)
@@ -5172,6 +5176,14 @@
 	  continue;
 	}
 
+#if __CYGWIN__
+      {
+       extern int igncr;
+       if (igncr && c == '\r')
+         continue;
+      }
+#endif /* __CYGWIN__ */
+
       /* Add the character to ISTRING, possibly after resizing it. */
       RESIZE_MALLOCED_BUFFER (istring, istring_index, 2, istring_size, DEFAULT_ARRAY_SIZE);
 
@@ -5288,6 +5300,28 @@
       goto error_exit;
     }
 
+#if __CYGWIN__
+  /* Passing a pipe through std fds can cause hangs when talking to a
+     non-cygwin child.  Move it.  */
+  if (fildes[0] < 3)
+    {
+      int fd = fcntl (fildes[0], F_DUPFD, 3);
+      close (fildes[0]);
+      fildes[0] = fd;
+    }
+  if (fildes[1] < 3)
+    {
+      int fd = fcntl (fildes[1], F_DUPFD, 3);
+      close (fildes[1]);
+      fildes[1] = fd;
+    }
+  if (fildes[0] < 0 || fildes[1] < 0)
+    {
+      sys_error (_("cannot make pipe for command substitution"));
+      goto error_exit;
+    }
+#endif /* __CYGWIN__ */
+
   old_pid = last_made_pid;
 #if defined (JOB_CONTROL)
   old_pipeline_pgrp = pipeline_pgrp;
diff -urN bash-4.2.orig/variables.c bash-4.2/variables.c
--- bash-4.2.orig/variables.c	2012-02-21 04:37:24.324063300 -0800
+++ bash-4.2/variables.c	2012-02-21 04:43:05.821849200 -0800
@@ -4178,6 +4178,8 @@
 
   { "FUNCNEST", sv_funcnest },
 
+  { "EXECIGNORE", sv_execignore },
+
   { "GLOBIGNORE", sv_globignore },
 
 #if defined (HISTORY)
@@ -4374,6 +4376,13 @@
     setup_glob_ignore (name);
 }
 
+/* What to do when EXECIGNORE changes. */
+void
+sv_execignore (char *name)
+{
+  setup_exec_ignore (name);
+}
+
 #if defined (READLINE)
 void
 sv_comp_wordbreaks (name)
diff -urN bash-4.2.orig/variables.h bash-4.2/variables.h
--- bash-4.2.orig/variables.h	2012-02-21 04:37:24.021002700 -0800
+++ bash-4.2/variables.h	2012-02-21 04:43:05.825850000 -0800
@@ -356,6 +356,7 @@
 extern void sv_mail __P((char *));
 extern void sv_funcnest __P((char *));
 extern void sv_globignore __P((char *));
+extern void sv_execignore __P((char *));
 extern void sv_ignoreeof __P((char *));
 extern void sv_strict_posix __P((char *));
 extern void sv_optind __P((char *));
