diff -urN bash-4.2.orig/bashline.c bash-4.2/bashline.c
--- bash-4.2.orig/bashline.c	2012-08-05 00:45:20.390300000 -0700
+++ bash-4.2/bashline.c	2012-08-05 04:18:39.848800000 -0700
@@ -243,6 +243,11 @@
    are the only possible matches, even if FIGNORE says to. */
 int force_fignore = 1;
 
+#if __CYGWIN__
+/* If set, shorten "foo.exe" to "foo" when they are the same file. */
+int completion_strip_exe = 1;
+#endif /*  __CYGWIN__ */
+
 /* Perform spelling correction on directory names during word completion */
 int dircomplete_spelling = 0;
 
@@ -457,11 +462,20 @@
   kseq[0] = CTRL('J');
   kseq[1] = '\0';
   func = rl_function_of_keyseq (kseq, emacs_meta_keymap, (int *)NULL);
+#if __CYGWIN__
+  extern rl_command_func_t *_imp__rl_vi_editing_mode;
+  if (func == rl_vi_editing_mode || func == _imp__rl_vi_editing_mode)
+#else
   if (func == rl_vi_editing_mode)
+#endif /* __CYGWIN__ */
     rl_unbind_key_in_map (CTRL('J'), emacs_meta_keymap);
   kseq[0] = CTRL('M');
   func = rl_function_of_keyseq (kseq, emacs_meta_keymap, (int *)NULL);
+#if __CYGWIN__
+  if (func == rl_vi_editing_mode || func == _imp__rl_vi_editing_mode)
+#else
   if (func == rl_vi_editing_mode)
+#endif /* __CYGWIN__ */
     rl_unbind_key_in_map (CTRL('M'), emacs_meta_keymap);
 #if defined (VI_MODE)
   rl_unbind_key_in_map (CTRL('E'), vi_movement_keymap);
@@ -480,7 +494,12 @@
   kseq[0] = '~';
   kseq[1] = '\0';
   func = rl_function_of_keyseq (kseq, emacs_meta_keymap, (int *)NULL);
+#if __CYGWIN__
+  extern rl_command_func_t *_imp__rl_tilde_expand;
+  if (func == 0 || func == rl_tilde_expand || func == _imp__rl_tilde_expand)
+#else
   if (func == 0 || func == rl_tilde_expand)
+#endif /* __CYGWIN__ */
     rl_bind_keyseq_in_map (kseq, bash_complete_username, emacs_meta_keymap);
 
   rl_bind_key_if_unbound_in_map ('~', bash_possible_username_completions, emacs_ctlx_keymap);
@@ -503,7 +522,12 @@
   kseq[0] = TAB;
   kseq[1] = '\0';
   func = rl_function_of_keyseq (kseq, emacs_meta_keymap, (int *)NULL);
+#if __CYGWIN__
+  extern rl_command_func_t *_imp__rl_tab_insert;
+  if (func == 0 || func == rl_tab_insert || func == _imp__rl_tab_insert)
+#else
   if (func == 0 || func == rl_tab_insert)
+#endif /* __CYGWIN__ */
     rl_bind_key_in_map (TAB, dynamic_complete_history, emacs_meta_keymap);
 
   /* Tell the completer that we want a crack first. */
@@ -1867,6 +1891,14 @@
       /* If we have found a match, and it is an executable file or a
 	 directory name, return it. */
       if (match && executable_or_directory (val))
+#elif __CYGWIN__
+      /* executable_or_directory will do the right thing on //server,
+	 but calling stat("//server") is an order of magnitude slower
+	 than noting that readdir("//") only returns directories.  */
+      if (match && (searching_path ? executable_file (val)
+		    : ((val[0] == '/' && val[1] == '/'
+			&& ! strchr (&val[2], '/'))
+		       || executable_or_directory (val))))
 #else
       /* If we have found a match, and it is an executable file, return it.
 	 We don't return directory names when searching $PATH, since the
@@ -1874,8 +1906,23 @@
 	 appear in directories in $PATH when they're specified using
 	 relative pathnames. */
       if (match && (searching_path ? executable_file (val) : executable_or_directory (val)))
-#endif
+#endif /* 0 / __CYGWIN__ */
 	{
+#if __CYGWIN__
+          if (completion_strip_exe)
+            {
+              int val_len = strlen (val);
+              char *candidate;
+              if (val_len > 4 && !strcasecmp (&val[val_len - 4], ".exe")
+                  && (candidate = strdup (val)))
+                {
+                  candidate[val_len - 4] = '\0';
+                  if (same_file (val, candidate, NULL, NULL))
+                    temp[strlen (temp) - 4] = '\0';
+                  free (candidate);
+                }
+            }
+#endif /* __CYGWIN__ */
 	  free (val);
 	  val = "";		/* So it won't be NULL. */
 	  return (temp);
@@ -2607,6 +2654,17 @@
   int r;
 
   fn = bash_tilde_expand (name, 0);
+#if __CYGWIN__
+  /* stat("//server") can only be successful as a directory, but takes
+     a several-second timeout to fail.  It is much faster to assume
+     that //server is a valid name than it is to wait for the stat,
+     even though it gives false positives on bad names.  */
+  if (fn[0] == '/' && fn[1] == '/' && ! strchr (&fn[2], '/'))
+    {
+      free (fn);
+      return 1;
+    }
+#endif /* __CYGWIN__ */
   r = file_isdir (fn);
   free (fn);
 
diff -urN bash-4.2.orig/builtins/set.def bash-4.2/builtins/set.def
--- bash-4.2.orig/builtins/set.def	2011-01-10 06:22:25.000000000 -0800
+++ bash-4.2/builtins/set.def	2012-08-05 03:57:55.948800000 -0700
@@ -57,6 +57,14 @@
 extern int no_line_editing;
 #endif /* READLINE */
 
+#if __CYGWIN__
+extern int igncr;
+static int set_minus_o_option_maybe (int, char *, int);
+#  define INTERACTIVE_ONLY ,1
+#else
+#  define INTERACTIVE_ONLY
+#endif /* __CYGWIN__ */
+
 $BUILTIN set
 $FUNCTION set_builtin
 $SHORT_DOC set [-abefhkmnptuvxBCHP] [-o option-name] [--] [arg ...]
@@ -92,6 +100,9 @@
 #if defined (HISTORY)
           history      enable command history
 #endif
+#if __CYGWIN__
+	  igncr        on cygwin, ignore \r in line endings
+#endif
           ignoreeof    the shell will not exit upon reading EOF
           interactive-comments
                        allow comments to appear in interactive commands
@@ -184,28 +195,40 @@
   int *variable;
   setopt_set_func_t *set_func;
   setopt_get_func_t *get_func;
+#if __CYGWIN__
+  /* Cygwin users have taken to exporting SHELLOPTS for the
+     cygwin-specific igncr.  As a result, we need to make sure
+     SHELLOPTS parsing does not turn on interactive options when
+     exported from an interactive shell, but parsed in a
+     non-interactive setting, since some interactive options violate
+     POSIX /bin/sh rules.  */
+  int interactive_only;
+#endif /* __CYGWIN__ */
 } o_options[] = {
   { "allexport",  'a', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL },
 #if defined (BRACE_EXPANSION)
   { "braceexpand",'B', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
 #endif
 #if defined (READLINE)
-  { "emacs",     '\0', (int *)NULL, set_edit_mode, get_edit_mode },
+  { "emacs",     '\0', (int *)NULL, set_edit_mode, get_edit_mode INTERACTIVE_ONLY },
 #endif
   { "errexit",	  'e', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
   { "errtrace",	  'E', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
   { "functrace",  'T', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
   { "hashall",    'h', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
 #if defined (BANG_HISTORY)
-  { "histexpand", 'H', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
+  { "histexpand", 'H', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL INTERACTIVE_ONLY  },
 #endif /* BANG_HISTORY */
 #if defined (HISTORY)
-  { "history",   '\0', &enable_history_list, bash_set_history, (setopt_get_func_t *)NULL },
+  { "history",   '\0', &enable_history_list, bash_set_history, (setopt_get_func_t *)NULL INTERACTIVE_ONLY },
+#endif
+#if __CYGWIN__
+  { "igncr",     '\0', &igncr, NULL, (setopt_get_func_t *)NULL },
 #endif
   { "ignoreeof", '\0', &ignoreeof, set_ignoreeof, (setopt_get_func_t *)NULL },
   { "interactive-comments", '\0', &interactive_comments, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL },
   { "keyword",    'k', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
-  { "monitor",	  'm', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
+  { "monitor",	  'm', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL INTERACTIVE_ONLY  },
   { "noclobber",  'C', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
   { "noexec",	  'n', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
   { "noglob",	  'f', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
@@ -223,7 +246,7 @@
   { "privileged", 'p', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
   { "verbose",	  'v', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
 #if defined (READLINE)
-  { "vi",        '\0', (int *)NULL, set_edit_mode, get_edit_mode },
+  { "vi",        '\0', (int *)NULL, set_edit_mode, get_edit_mode INTERACTIVE_ONLY },
 #endif
   { "xtrace",	  'x', (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL  },
   {(char *)NULL, 0 , (int *)NULL, (setopt_set_func_t *)NULL, (setopt_get_func_t *)NULL },
@@ -410,6 +433,15 @@
 set_minus_o_option (on_or_off, option_name)
      int on_or_off;
      char *option_name;
+#if __CYGWIN__
+{
+  /* See cygwin comments above.  */
+  return set_minus_o_option_maybe (on_or_off, option_name, 0);
+}
+static int
+set_minus_o_option_maybe (int on_or_off, char *option_name,
+			  int avoid_interactive)
+#endif /* __CYGWIN__ */
 {
   register int i;
 
@@ -417,6 +449,10 @@
     {
       if (STREQ (option_name, o_options[i].name))
 	{
+#if __CYGWIN__
+	  if (o_options[i].interactive_only && avoid_interactive)
+	    return EXECUTION_SUCCESS;
+#endif /* __CYGWIN__ */
 	  if (o_options[i].letter == 0)
 	    {
 	      SET_BINARY_O_OPTION_VALUE (i, on_or_off, option_name);
@@ -542,7 +578,11 @@
   vptr = 0;
   while (vname = extract_colon_unit (value, &vptr))
     {
+#if __CYGWIN__
+    set_minus_o_option_maybe (FLAG_ON, vname, !interactive_shell);
+#else /* !__CYGWIN__ */
       set_minus_o_option (FLAG_ON, vname);
+#endif
       free (vname);
     }
 }
diff -urN bash-4.2.orig/builtins/shopt.def bash-4.2/builtins/shopt.def
--- bash-4.2.orig/builtins/shopt.def	2012-08-05 00:45:20.396300000 -0700
+++ bash-4.2/builtins/shopt.def	2012-08-05 04:02:52.444800000 -0700
@@ -88,6 +88,11 @@
 extern int check_jobs_at_exit;
 extern int autocd;
 extern int glob_star;
+
+#if __CYGWIN__
+extern int completion_strip_exe;
+#endif
+
 extern int lastpipe_opt;
 
 #if defined (EXTENDED_GLOB)
@@ -157,6 +162,9 @@
   { "compat32", &shopt_compat32, set_compatibility_level },
   { "compat40", &shopt_compat40, set_compatibility_level },
   { "compat41", &shopt_compat41, set_compatibility_level },
+#if __CYGWIN__
+  { "completion_strip_exe", &completion_strip_exe, (shopt_set_func_t *)NULL },
+#endif
 #if defined (READLINE)
   { "direxpand", &dircomplete_expand, shopt_set_complete_direxpand },
   { "dirspell", &dircomplete_spelling, (shopt_set_func_t *)NULL },
diff -urN bash-4.2.orig/doc/bash.1 bash-4.2/doc/bash.1
--- bash-4.2.orig/doc/bash.1	2012-08-05 00:45:23.584300000 -0700
+++ bash-4.2/doc/bash.1	2012-08-05 04:30:40.911800000 -0700
@@ -1592,6 +1592,15 @@
 Expands to the effective user ID of the current user, initialized at
 shell startup.  This variable is readonly.
 .TP
+.B EXECIGNORE
+A colon-separated list of extended glob (see \fBPattern Matching\fP)
+patterns. Files with full paths matching one of these patterns are
+not considered executable for the purposes of completion and PATH
+searching, but the \fB[\fP, \fB[[\fP, and \fBtest\fP builtins are not
+affected. Use this variable to deal with systems that set the
+executable bit on files that are not actually executable.  Only
+present on cygwin targets.
+.TP
 .B FUNCNAME
 An array variable containing the names of all shell functions
 currently in the execution call stack.
@@ -8964,6 +8973,11 @@
 attempts spelling correction on directory names during word completion
 if the directory name initially supplied does not exist.
 .TP 8
+.B completion_strip_exe
+If set, whenever bash sees `foo.exe' during completion, it checks if
+`foo' is the same file and strips the suffix.  Only present on cygwin
+targets.
+.TP 8
 .B dotglob
 If set, 
 .B bash
diff -urN bash-4.2.orig/doc/bashref.texi bash-4.2/doc/bashref.texi
--- bash-4.2.orig/doc/bashref.texi	2012-08-05 00:45:23.584300000 -0700
+++ bash-4.2/doc/bashref.texi	2012-08-05 04:31:16.791800000 -0700
@@ -4535,6 +4535,11 @@
 quoted.  This is the behavior of @sc{posix} mode through version 4.1.
 The default Bash behavior remains as in previous versions.
 
+@item completion_strip_exe
+If set, whenever bash sees `foo.exe' during completion, it checks if
+`foo' is the same file and strips the suffix.  Only present on cygwin
+targets.
+
 @item direxpand
 If set, Bash
 replaces directory names with the results of word expansion when performing
@@ -5087,6 +5092,15 @@
 The numeric effective user id of the current user.  This variable
 is readonly.
 
+@item EXECIGNORE
+A colon-separated list of extended glob ((@pxref{Pattern Matching})
+patterns. Files with full paths matching one of these patterns are
+not considered executable for the purposes of completion and PATH
+searching, but the @code{[}, @code{[[}, and @code{test} builtins are
+not affected. Use this variable to deal with systems that set the
+executable bit on files that are not actually executable.  Only
+present on cygwin targets.
+
 @item FCEDIT
 The editor used as a default by the @option{-e} option to the @code{fc}
 builtin command.
diff -urN bash-4.2.orig/findcmd.c bash-4.2/findcmd.c
--- bash-4.2.orig/findcmd.c	2010-10-06 14:38:40.000000000 -0700
+++ bash-4.2/findcmd.c	2012-08-05 04:28:17.892800000 -0700
@@ -44,6 +44,10 @@
 #include "hashcmd.h"
 #include "findcmd.h"	/* matching prototypes and declarations */
 
+#if __CYGWIN__
+#  include <lib/glob/strmatch.h>
+#endif
+
 #if !defined (errno)
 extern int errno;
 #endif
@@ -76,6 +80,40 @@
    containing the file of interest. */
 int dot_found_in_search = 0;
 
+#if __CYGWIN__
+static struct ignorevar execignore =
+{
+  "EXECIGNORE",
+  (struct ign *)0,
+  0,
+  (char *)0,
+  (sh_iv_item_func_t *)0,
+};
+
+void
+setup_exec_ignore (char *varname)
+{
+  setup_ignore_patterns (&execignore);
+}
+
+/* Return whether we should never consider file executable
+ * even if the system tells us it is. */
+static int
+is_on_exec_blacklist (const char *name)
+{
+  struct ign *p;
+  int flags = FNM_EXTMATCH | FNM_CASEFOLD;
+
+  for (p = execignore.ignores; p && p->val; p++)
+    {
+      if (strmatch (p->val, (char *)name, flags) != FNM_NOMATCH)
+      return (1);
+    }
+
+  return (0);
+}
+#endif /* __CYGWIN__ */
+
 /* Return some flags based on information about this file.
    The EXISTS bit is non-zero if the file is found.
    The EXECABLE bit is non-zero the file is executble.
@@ -103,7 +141,11 @@
      file access mechanisms into account.  eaccess uses the effective
      user and group IDs, not the real ones.  We could use sh_eaccess,
      but we don't want any special treatment for /dev/fd. */
+#if __CYGWIN__
+  if (!is_on_exec_blacklist (name) && eaccess (name, X_OK) == 0)
+#else
   if (eaccess (name, X_OK) == 0)
+#endif
     r |= FS_EXECABLE;
   if (eaccess (name, R_OK) == 0)
     r |= FS_READABLE;
diff -urN bash-4.2.orig/findcmd.h bash-4.2/findcmd.h
--- bash-4.2.orig/findcmd.h	2009-01-04 11:32:29.000000000 -0800
+++ bash-4.2/findcmd.h	2012-08-05 04:33:29.381800000 -0700
@@ -31,5 +31,8 @@
 extern char *find_path_file __P((const char *));
 extern char *search_for_command __P((const char *));
 extern char *user_command_matches __P((const char *, int, int));
+#if __CYGWIN__
+extern void setup_exec_ignore __P((char *));
+#endif
 
 #endif /* _FINDCMD_H_ */
diff -urN bash-4.2.orig/input.c bash-4.2/input.c
--- bash-4.2.orig/input.c	2011-01-02 12:58:57.000000000 -0800
+++ bash-4.2/input.c	2012-08-05 04:44:56.085800000 -0700
@@ -43,6 +43,10 @@
 #include "externs.h"
 #include "quit.h"
 
+#if __CYGWIN__
+int igncr;
+#endif
+
 #if !defined (errno)
 extern int errno;
 #endif /* !errno */
@@ -550,6 +554,18 @@
 {
   CHECK_TERMSIG;
 
+#if __CYGWIN__
+  /* shopt igncr means to discard carriage returns from input stream.
+     If cr is the only character in the buffer, then recurse to pick
+     up the next character; otherwise flatten the buffer.  */
+  if (igncr)
+    {
+      int ch;
+      while ((ch = bufstream_getc (buffers[bash_input.location.buffered_fd]))
+	     == '\r');
+      return ch;
+    }
+#endif /* __CYGWIN__ */
 #if !defined (DJGPP)
   return (bufstream_getc (buffers[bash_input.location.buffered_fd]));
 #else
@@ -558,7 +574,7 @@
   while ((ch = bufstream_getc (buffers[bash_input.location.buffered_fd])) == '\r')
     ;
   return ch;
-#endif
+#endif /* DJGPP */
 }
 
 int
diff -urN bash-4.2.orig/lib/sh/pathcanon.c bash-4.2/lib/sh/pathcanon.c
--- bash-4.2.orig/lib/sh/pathcanon.c	2008-08-12 11:01:37.000000000 -0700
+++ bash-4.2/lib/sh/pathcanon.c	2012-08-05 04:54:47.606300000 -0700
@@ -194,6 +194,11 @@
 	    *q++ = DIRSEP;
 	  while (*p && (ISDIRSEP(*p) == 0))
 	    *q++ = *p++;
+/* FIXME: omgwtfbbq? */
+#if __CYGWIN__
+	}
+      }
+#endif
 	  /* Check here for a valid directory with _path_isdir. */
 	  if (flags & PATH_CHECKEXISTS)
 	    {
@@ -211,8 +216,11 @@
 		}
 	      *q = c;
 	    }
+/* FIXME: omgwtfbbq? */
+#ifndef __CYGWIN__
 	}
     }
+#endif
 
   /* Empty string is really ``.'' or `/', depending on what we started with. */
   if (q == result)
diff -urN bash-4.2.orig/lib/sh/pathphys.c bash-4.2/lib/sh/pathphys.c
--- bash-4.2.orig/lib/sh/pathphys.c	2008-08-12 11:01:23.000000000 -0700
+++ bash-4.2/lib/sh/pathphys.c	2012-08-05 05:01:09.574300000 -0700
@@ -36,6 +36,10 @@
 #include <chartypes.h>
 #include <errno.h>
 
+#if __CYGWIN__
+#  include <stdlib.h>
+#endif
+
 #include "shell.h"
 
 #if !defined (MAXSYMLINKS)
@@ -76,6 +80,11 @@
      char *path;
      int flags;
 {
+#if __CYGWIN__
+  /* realpath does this without all the hassle
+     gmt: (really?  what about "flags"?) */
+  return realpath(path, NULL);
+#else
   char tbuf[PATH_MAX+1], linkbuf[PATH_MAX+1];
   char *result, *p, *q, *qsave, *qbase, *workpath;
   int double_slash_path, linklen, nlink;
@@ -106,6 +115,7 @@
   /* POSIX.2 says to leave a leading `//' alone.  On cygwin, we skip over any
      leading `x:' (dos drive name). */
 #if defined (__CYGWIN__)
+  /* FIXME: dead code */
   qbase = (ISALPHA((unsigned char)workpath[0]) && workpath[1] == ':') ? workpath + 3 : workpath + 1;
 #else
   qbase = workpath + 1;
@@ -215,6 +225,7 @@
 	      q = result;
 	      /* Duplicating some code here... */
 #if defined (__CYGWIN__)
+	      /* FIXME: dead code */
 	      qbase = (ISALPHA((unsigned char)workpath[0]) && workpath[1] == ':') ? workpath + 3 : workpath + 1;
 #else
 	      qbase = workpath + 1;
@@ -249,6 +260,7 @@
     }
 
   return (result);
+#endif /* !__CYGWIN__ */
 }
 
 char *
diff -urN bash-4.2.orig/lib/sh/tmpfile.c bash-4.2/lib/sh/tmpfile.c
--- bash-4.2.orig/lib/sh/tmpfile.c	2011-01-02 12:34:07.000000000 -0800
+++ bash-4.2/lib/sh/tmpfile.c	2012-08-05 05:15:02.190300000 -0700
@@ -94,7 +94,11 @@
   if (tdir && (file_iswdir (tdir) == 0 || strlen (tdir) > PATH_MAX))
     tdir = 0;
 
+#if __CYGWIN__
+  if (tdir == 0 || !file_iswdir (tdir))
+#else
   if (tdir == 0)
+#endif
     tdir = get_sys_tmpdir ();
 
 #if defined (HAVE_PATHCONF) && defined (_PC_NAME_MAX)
@@ -116,14 +120,23 @@
   struct stat sb;
   int r, tdlen;
 
+#if __CYGWIN__
+  filename = (char *)NULL;
+#else
   filename = (char *)xmalloc (PATH_MAX + 1);
+#endif
   tdir = get_tmpdir (flags);
   tdlen = strlen (tdir);
 
   lroot = nameroot ? nameroot : DEFAULT_NAMEROOT;
 
 #ifdef USE_MKTEMP
+#if __CYGWIN__
+  if (asprintf (&filename, "%s/%s.XXXXXX", tdir, lroot) < 0)
+    return (char *)NULL;
+#else
   sprintf (filename, "%s/%s.XXXXXX", tdir, lroot);
+#endif /* __CYGWIN__ */
   if (mktemp (filename) == 0)
     {
       free (filename);
@@ -136,7 +149,13 @@
 		(unsigned long) time ((time_t *)0) ^
 		(unsigned long) dollar_dollar_pid ^
 		(unsigned long) ((flags & MT_USERANDOM) ? get_random_number () : ntmpfiles++);
+#if __CYGWIN__
+      free (filename);
+      if (asprintf (&filename, "%s/%s-%lu", tdir, lroot, filenum) < 0)
+        return (char *)NULL;
+#else
       sprintf (filename, "%s/%s-%lu", tdir, lroot, filenum);
+#endif
       if (tmpnamelen > 0 && tmpnamelen < 32)
 	filename[tdlen + 1 + tmpnamelen] = '\0';
 #  ifdef HAVE_LSTAT
@@ -161,14 +180,27 @@
   char *filename, *tdir, *lroot;
   int fd, tdlen;
 
+#if __CYGWIN__
+  filename = (char *)NULL;
+#else
   filename = (char *)xmalloc (PATH_MAX + 1);
+#endif
   tdir = get_tmpdir (flags);
   tdlen = strlen (tdir);
 
   lroot = nameroot ? nameroot : DEFAULT_NAMEROOT;
 
 #ifdef USE_MKSTEMP
+#if __CYGWIN__
+  if (asprintf (&filename, "%s/%s.XXXXXXX", tdir, lroot) < 0)
+    {
+      if (namep)
+        *namep = NULL;
+      return -1;
+    }
+#else
   sprintf (filename, "%s/%s.XXXXXX", tdir, lroot);
+#endif /* __CYGWIN__ */
   fd = mkstemp (filename);
   if (fd < 0 || namep == 0)
     {
@@ -185,7 +217,17 @@
 		(unsigned long) time ((time_t *)0) ^
 		(unsigned long) dollar_dollar_pid ^
 		(unsigned long) ((flags & MT_USERANDOM) ? get_random_number () : ntmpfiles++);
+#if __CYGWIN__
+      free (filename);
+      if (asprintf (&filename, "%s/%s-%lu", tdir, lroot, filenum) < 0)
+        {
+          if (namep)
+            *namep = NULL;
+          return -1;
+	}
+#else
       sprintf (filename, "%s/%s-%lu", tdir, lroot, filenum);
+#endif
       if (tmpnamelen > 0 && tmpnamelen < 32)
 	filename[tdlen + 1 + tmpnamelen] = '\0';
       fd = open (filename, BASEOPENFLAGS | ((flags & MT_READWRITE) ? O_RDWR : O_WRONLY), 0600);
diff -urN bash-4.2.orig/parse.y bash-4.2/parse.y
--- bash-4.2.orig/parse.y	2012-08-05 00:45:22.534300000 -0700
+++ bash-4.2/parse.y	2012-08-05 05:21:10.054300000 -0700
@@ -1526,14 +1526,30 @@
   string = bash_input.location.string;
 
   /* If the string doesn't exist, or is empty, EOF found. */
+#if __CYGWIN__
+  while (string && *string)
+#else
   if (string && *string)
+#endif
     {
       c = *string++;
       bash_input.location.string = string;
+#if __CYGWIN__
+      if (1)
+        {
+          extern int igncr;
+	  if (igncr && c == '\r')
+            continue;
+        }
+#endif /* __CYGWIN__ */
       return (c);
     }
+#if __CYGWIN__
+  return (EOF);
+#else
   else
     return (EOF);
+#endif /* ! __CYGWIN__ */
 }
 
 static int
@@ -5568,6 +5584,15 @@
      parser's complaining about by looking at current_token. */
   if (current_token != 0 && EOF_Reached == 0 && (msg = error_token_from_token (current_token)))
     {
+#if __CYGWIN__
+      /* Try to help clueless users. */
+      char *p = msg;
+      if (ansic_shouldquote (msg))
+        {
+          msg = ansic_quote (msg, 0, NULL);
+          free (p);
+        }
+#endif
       if (ansic_shouldquote (msg))
 	{
 	  p = ansic_quote (msg, 0, NULL);
diff -urN bash-4.2.orig/pathexp.h bash-4.2/pathexp.h
--- bash-4.2.orig/pathexp.h	2009-01-04 11:32:40.000000000 -0800
+++ bash-4.2/pathexp.h	2012-08-05 05:22:25.383300000 -0700
@@ -86,7 +86,7 @@
 typedef int sh_iv_item_func_t __P((struct ign *));
 
 struct ignorevar {
-  char *varname;	/* FIGNORE or GLOBIGNORE */
+  char *varname;	/* FIGNORE or GLOBIGNORE (or EXECIGNORE on cygwin) */
   struct ign *ignores;	/* Store the ignore strings here */
   int num_ignores;	/* How many are there? */
   char *last_ignoreval;	/* Last value of variable - cached for speed */
diff -urN bash-4.2.orig/shell.c bash-4.2/shell.c
--- bash-4.2.orig/shell.c	2011-01-02 13:04:51.000000000 -0800
+++ bash-4.2/shell.c	2012-08-05 05:26:43.781300000 -0700
@@ -330,7 +330,10 @@
   struct stat sb;
 
   if (stat ("/tmp", &sb) < 0)
-    internal_warning (_("could not find /tmp, please create!"));
+    {
+      if (mkdir ("/tmp", S_IRWXU | S_IRWXG | S_IRWXO | S_ISVTX) != 0)
+        internal_warning (_("could not find /tmp, please create!"));
+    }
   else
     {
       if (S_ISDIR (sb.st_mode) == 0)
diff -urN bash-4.2.orig/subst.c bash-4.2/subst.c
--- bash-4.2.orig/subst.c	2012-08-05 00:45:23.384300000 -0700
+++ bash-4.2/subst.c	2012-08-05 05:31:57.771300000 -0700
@@ -5180,6 +5180,14 @@
 	  continue;
 	}
 
+#if __CYGWIN__
+      if (1) {
+        extern int igncr;
+	if (igncr && c == '\r')
+          continue;
+      }
+#endif
+
       /* Add the character to ISTRING, possibly after resizing it. */
       RESIZE_MALLOCED_BUFFER (istring, istring_index, 2, istring_size, DEFAULT_ARRAY_SIZE);
 
@@ -5296,6 +5304,28 @@
       goto error_exit;
     }
 
+#if __CYGWIN__
+  /* Passing a pipe through std fds can cause hangs when talking to a
+     non-cygwin child.  Move it.  */
+  if (fildes[0] < 3)
+    {
+      int fd = fcntl (fildes[0], F_DUPFD, 3);
+      close (fildes[0]);
+      fildes[0] = fd;
+    }
+  if (fildes[1] < 3)
+    {
+      int fd = fcntl (fildes[1], F_DUPFD, 3);
+      close (fildes[1]);
+      fildes[1] = fd;
+    }
+  if (fildes[0] < 0 || fildes[1] < 0)
+    {
+      sys_error (_("cannot make pipe for command substitution"));
+      goto error_exit;
+    }
+#endif /* __CYGWIN__ */
+
   old_pid = last_made_pid;
 #if defined (JOB_CONTROL)
   old_pipeline_pgrp = pipeline_pgrp;
diff -urN bash-4.2.orig/variables.c bash-4.2/variables.c
--- bash-4.2.orig/variables.c	2012-08-05 00:45:11.338300000 -0700
+++ bash-4.2/variables.c	2012-08-05 05:33:29.895300000 -0700
@@ -4180,6 +4180,10 @@
 
   { "GLOBIGNORE", sv_globignore },
 
+#if __CYGWIN__
+  { "EXECIGNORE", sv_execignore },
+#endif
+
 #if defined (HISTORY)
   { "HISTCONTROL", sv_history_control },
   { "HISTFILESIZE", sv_histsize },
@@ -4374,6 +4378,15 @@
     setup_glob_ignore (name);
 }
 
+#if __CYGWIN__
+/* What to do when EXECIGNORE changes. */
+void
+sv_execignore (char *name)
+{
+  setup_exec_ignore (name);
+}
+#endif
+
 #if defined (READLINE)
 void
 sv_comp_wordbreaks (name)
diff -urN bash-4.2.orig/variables.h bash-4.2/variables.h
--- bash-4.2.orig/variables.h	2012-08-05 00:45:10.926300000 -0700
+++ bash-4.2/variables.h	2012-08-05 05:34:15.109300000 -0700
@@ -356,6 +356,9 @@
 extern void sv_mail __P((char *));
 extern void sv_funcnest __P((char *));
 extern void sv_globignore __P((char *));
+#if __CYGWIN__
+extern void sv_execignore __P((char *));
+#endif
 extern void sv_ignoreeof __P((char *));
 extern void sv_strict_posix __P((char *));
 extern void sv_optind __P((char *));
