diff -ru Python-2.6.1.orig/Modules/fcntlmodule.c Python-2.6.1/Modules/fcntlmodule.c
--- Python-2.6.1.orig/Modules/fcntlmodule.c	2009-04-16 13:27:17 +0200
+++ Python-2.6.1/Modules/fcntlmodule.c	2009-04-16 13:35:27 +0200
@@ -565,41 +565,96 @@
 
 #ifdef HAVE_STROPTS_H
 	/* Unix 98 guarantees that these are in stropts.h. */
+	/* but old-ish glibcs miss a couple (I_GWROPT) ... */
+	/* and Interix has an empty stropts.h . */
+#ifdef I_PUSH
 	INS(I_PUSH);
+#endif
+#ifdef I_POP
 	INS(I_POP);
+#endif
+#ifdef I_LOOK
 	INS(I_LOOK);
+#endif
+#ifdef I_FLUSH
 	INS(I_FLUSH);
+#endif
+#ifdef I_FLUSHBAND
 	INS(I_FLUSHBAND);
+#endif
+#ifdef I_SETSIG
 	INS(I_SETSIG);
+#endif
+#ifdef I_GETSIG
 	INS(I_GETSIG);
+#endif
+#ifdef I_FIND
 	INS(I_FIND);
+#endif
+#ifdef I_PEEK
 	INS(I_PEEK);
+#endif
+#ifdef I_SRDOPT
 	INS(I_SRDOPT);
+#endif
+#ifdef I_GRDOPT
 	INS(I_GRDOPT);
+#endif
+#ifdef I_NREAD
 	INS(I_NREAD);
+#endif
+#ifdef I_FDINSERT
 	INS(I_FDINSERT);
+#endif
+#ifdef I_STR
 	INS(I_STR);
+#endif
+#ifdef I_SWROPT
 	INS(I_SWROPT);
+#endif
 #ifdef I_GWROPT
-	/* despite the comment above, old-ish glibcs miss a couple... */
 	INS(I_GWROPT);
 #endif
+#ifdef I_SENDFD
 	INS(I_SENDFD);
+#endif
+#ifdef I_RECVFD
 	INS(I_RECVFD);
+#endif
+#ifdef I_LIST
 	INS(I_LIST);
+#endif
+#ifdef I_ATMARK
 	INS(I_ATMARK);
+#endif
+#ifdef I_CKBAND
 	INS(I_CKBAND);
+#endif
+#ifdef I_GETBAND
 	INS(I_GETBAND);
+#endif
+#ifdef I_CANPUT
 	INS(I_CANPUT);
+#endif
+#ifdef I_SETCLTIME
 	INS(I_SETCLTIME);
+#endif
 #ifdef I_GETCLTIME
 	INS(I_GETCLTIME);
 #endif
+#ifdef I_LINK
 	INS(I_LINK);
+#endif
+#ifdef I_UNLINK
 	INS(I_UNLINK);
+#endif
+#ifdef I_PLINK
 	INS(I_PLINK);
+#endif
+#ifdef I_PUNLINK
 	INS(I_PUNLINK);
 #endif
+#endif /* HAVE_STROPTS_H */
 	
 	return 0;
 }
diff -ru Python-2.6.1.orig/Modules/mathmodule.c Python-2.6.1/Modules/mathmodule.c
--- Python-2.6.1.orig/Modules/mathmodule.c	2009-04-16 13:27:17 +0200
+++ Python-2.6.1/Modules/mathmodule.c	2009-04-16 13:36:02 +0200
@@ -606,6 +606,9 @@
 	else {
 		PyFPE_START_PROTECT("in math_frexp", return 0);
 		x = frexp(x, &i);
+#if defined(__INTERIX)
+		if(x >= 1.0) { x /= 2.0; ++i; }
+#endif
 		PyFPE_END_PROTECT(x);
 	}
 	return Py_BuildValue("(di)", x, i);
diff -ru Python-2.6.1.orig/Modules/posixmodule.c Python-2.6.1/Modules/posixmodule.c
--- Python-2.6.1.orig/Modules/posixmodule.c	2009-04-16 13:27:17 +0200
+++ Python-2.6.1/Modules/posixmodule.c	2009-04-16 13:35:27 +0200
@@ -8806,9 +8806,12 @@
 #endif
 
 	/* These come from sysexits.h */
+#ifdef HAVE_SYSEXITS_H
 #ifdef EX_OK
 	if (ins(d, "EX_OK", (long)EX_OK)) return -1;
-#endif /* EX_OK */
+#else /* ! EX_OK */
+	if (ins(d, "EX_OK", (long)0)) return -1;
+#endif /* ! EX_OK */
 #ifdef EX_USAGE
 	if (ins(d, "EX_USAGE", (long)EX_USAGE)) return -1;
 #endif /* EX_USAGE */
@@ -8857,6 +8860,9 @@
 #ifdef EX_NOTFOUND
 	if (ins(d, "EX_NOTFOUND", (long)EX_NOTFOUND)) return -1;
 #endif /* EX_NOTFOUND */
+#else /* ! HAVE_SYSEXITS_H */
+	if (ins(d, "EX_OK", (long)0)) return -1;
+#endif /* ! HAVE_SYSEXITS_H */
 
 #ifdef HAVE_SPAWNV
 #if defined(PYOS_OS2) && defined(PYCC_GCC)
diff -ru Python-2.6.1.orig/Objects/floatobject.c Python-2.6.1/Objects/floatobject.c
--- Python-2.6.1.orig/Objects/floatobject.c	2009-04-16 13:27:20 +0200
+++ Python-2.6.1/Objects/floatobject.c	2009-04-16 13:35:27 +0200
@@ -576,6 +576,7 @@
 		int wsign = _PyLong_Sign(w);
 		size_t nbits;
 		int exponent;
+		double mant;
 
 		if (vsign != wsign) {
 			/* Magnitudes are irrelevant -- the signs alone
@@ -620,7 +621,12 @@
 			op = _Py_SwappedOp[op];
 		}
 		assert(i > 0.0);
-		(void) frexp(i, &exponent);
+		mant = frexp(i, &exponent);
+
+		#if defined(__INTERIX)
+			if(mant >= 1.0) { mant /= 2.0; ++exponent; }
+		#endif
+
 		/* exponent is the # of bits in v before the radix point;
 		 * we know that nbits (the # of bits in w) > 48 at this point
 		 */
@@ -2137,6 +2143,10 @@
 
 		f = frexp(x, &e);
 
+		#if defined(__INTERIX)
+			if(f >= 1.0) { f /= 2.0; ++x; }
+		#endif
+
 		/* Normalize f to be in the range [1.0, 2.0) */
 		if (0.5 <= f && f < 1.0) {
 			f *= 2.0;
@@ -2242,6 +2252,10 @@
 
 		f = frexp(x, &e);
 
+		#if defined(__INTERIX)
+			if(f >= 1.0) { f /= 2.0; ++x; }
+		#endif
+
 		/* Normalize f to be in the range [1.0, 2.0) */
 		if (0.5 <= f && f < 1.0) {
 			f *= 2.0;
diff -ru Python-2.6.1.orig/Objects/longobject.c Python-2.6.1/Objects/longobject.c
--- Python-2.6.1.orig/Objects/longobject.c	2009-04-16 13:27:20 +0200
+++ Python-2.6.1/Objects/longobject.c	2009-04-16 13:35:27 +0200
@@ -189,6 +189,11 @@
 		dval = -dval;
 	}
 	frac = frexp(dval, &expo); /* dval = frac*2**expo; 0.0 <= frac < 1.0 */
+
+	#if defined(__INTERIX)
+	    if(frac >= 1.0) { frac /= 2.0; ++expo; }
+	#endif
+
 	if (expo <= 0)
 		return PyLong_FromLong(0L);
 	ndig = (expo-1) / PyLong_SHIFT + 1; /* Number of 'digits' in result */
diff -ru Python-2.6.1.orig/Python/dynload_shlib.c Python-2.6.1/Python/dynload_shlib.c
--- Python-2.6.1.orig/Python/dynload_shlib.c	2009-04-16 13:27:28 +0200
+++ Python-2.6.1/Python/dynload_shlib.c	2009-04-16 13:35:27 +0200
@@ -78,7 +78,7 @@
 	void *handle;
 	char funcname[258];
 	char pathbuf[260];
-        int dlopenflags=0;
+	int dlopenflags=0;
 
 	if (strchr(pathname, '/') == NULL) {
 		/* Prefix bare filename with "./" */
@@ -132,6 +132,33 @@
 	pathname = pathbuf;
 #endif
 
+#ifdef __INTERIX
+	/* ARG: This made me search 3 days! The interix loader has a problem:
+	 * If you try to load the same shared lib two times, once with absolute,
+	 * and once with relative path, it doesn't see, that both are the same
+	 * and tries to really load it a second time, which makes the __init
+	 * function crash (since the lib is inited allready...). So whatever
+	 * we do here, in any case we expand the path to an absolute one!
+	 * (markus duft) */
+
+	{
+		char buffer[PATH_MAX];
+
+		if(!realpath(pathname, buffer)) {
+			PyErr_SetString(PyExc_ImportError, strerror(errno));
+			return NULL;
+		}
+
+		if(strlen(buffer) >= 260) {
+			PyErr_SetString(PyExc_ImportError, "absolute path too long!");
+			return NULL;
+		}
+
+		strncpy(pathbuf, buffer, sizeof(pathbuf));
+		pathname = pathbuf;
+	}
+#endif
+
 	handle = dlopen(pathname, dlopenflags);
 
 	if (handle == NULL) {
diff -ru Python-2.6.1.orig/configure.in Python-2.6.1/configure.in
--- Python-2.6.1.orig/configure.in	2009-04-16 13:26:04 +0200
+++ Python-2.6.1/configure.in	2009-04-16 13:35:27 +0200
@@ -715,6 +715,12 @@
 	  esac
 	  INSTSONAME="$LDLIBRARY".$SOVERSION
 	  ;;
+    Interix*)
+	  LDLIBRARY='libpython$(VERSION).so'
+      BLDLIBRARY='-L. -lpython$(VERSION)'
+      RUNSHARED=LD_LIBRARY_PATH=`pwd`:${LD_LIBRARY_PATH}
+      INSTSONAME="$LDLIBRARY"
+      ;;
     hp*|HP*)
 	  case `uname -m` in
 		ia64)
@@ -957,6 +963,9 @@
 	OSF*)
 	    BASECFLAGS="$BASECFLAGS -mieee"
 	    ;;
+    Interix*)
+        BASECFLAGS="$BASECFLAGS -D_ALL_SOURCE"
+        ;;
     esac
     ;;
 
@@ -1706,6 +1715,7 @@
 	Monterey*) LDSHARED="cc -G -dy -Bdynamic -Bexport -L/usr/lib/ia64l64";;
 	CYGWIN*) LDSHARED="gcc -shared -Wl,--enable-auto-image-base";;
 	atheos*) LDSHARED="gcc -shared";;
+	Interix*) LDSHARED='$(CC) -shared' ;;
 	*)	LDSHARED="ld";;
 	esac
 fi
@@ -1761,6 +1771,7 @@
 #	    LINKFORSHARED="-Wl,-E -Wl,+s -Wl,+b\$(BINLIBDEST)/lib-dynload";;
 	BSD/OS/4*) LINKFORSHARED="-Xlinker -export-dynamic";;
 	Linux*|GNU*) LINKFORSHARED="-Xlinker -export-dynamic";;
+	Interix*) LINKFORSHARED="-Xlinker -export-dynamic";;
 	# -u libsys_s pulls in all symbols in libsys
 	Darwin/*) 
 		# -u _PyMac_Error is needed to pull in the mac toolbox glue,
