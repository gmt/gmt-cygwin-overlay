This one is a very hackish temporary workaround for a bug deep down in interix itself.
The problem is reported at Microsoft, and beeing worked on (hopefully). I'll keep
track of MS, and remove that patch when a Interix hotfix exists that fixes the underlying
problem. Until then - happy hack ;)

--- Python-2.6.2.orig/Modules/arraymodule.c	2009-11-13 09:06:09 +0100
+++ Python-2.6.2/Modules/arraymodule.c	2009-11-13 09:05:36 +0100
@@ -1255,8 +1255,59 @@
 		self->ob_item = item;
 		Py_SIZE(self) += n;
 		self->allocated = Py_SIZE(self);
+
+		#ifdef __INTERIX
+		{
+			time_t t_start=time(NULL);
+			fd_set check_set;
+			int t_sel=0;
+			struct timeval t_zero = { 0,500 };
+			errno=0;
+			nread=0;
+			clearerr(fp);
+
+			FD_ZERO(&check_set);
+			FD_SET(fileno(fp), &check_set);
+
+			t_sel = select(fileno(fp) + 1, &check_set, NULL, NULL, &t_zero);
+
+			while(nread == 0) {
+				nread = fread(item + (Py_SIZE(self) - n) * itemsize,
+						  itemsize, n, fp);
+				
+				if(feof(fp) || (ferror(fp) && errno != EAGAIN))
+					break;
+
+				if(nread == 0 && t_sel < 0)
+					break;
+
+				if(nread == 0 && t_sel != 1)
+					fprintf(stderr, "warning: python: read hitting interix select() bug. delaying read.\n");
+
+				if(nread == 0) {
+					/* retry read from stream, if timeout not reached - this way
+					 * users of this function that do not select() on the stream
+					 * before reading still work.
+					 * The above select should rather accurate determine whether
+					 * we are hitting the bug (select says yes, but fread no), so
+					 * we retry for a _long_ time to read from the stream, since
+					 * there _should_ be data available. */
+					if(time(NULL) > (t_start + 30)) {
+						fprintf(stderr, "error: python: read hit interix select() bug. giving up.\n");
+						break;
+					}
+
+					/* delay a little, so that the windows kernel has time to sync
+					 * the I/O on pipes across processes on multi-cpu systems */
+					usleep(1);
+				}
+			}
+		}
+		#else
 		nread = fread(item + (Py_SIZE(self) - n) * itemsize,
-			      itemsize, n, fp);
+				  itemsize, n, fp);
+		#endif
+
 		if (nread < (size_t)n) {
 		  Py_SIZE(self) -= (n - nread);
 			PyMem_RESIZE(item, char, Py_SIZE(self)*itemsize);
