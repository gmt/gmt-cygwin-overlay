IRIX patch by Stuart Shelton

Added configure check for alloca.h to enable the guards for bug #286943

http://bugs.gentoo.org/show_bug.cgi?id=266494

--- setup.py.orig	2009-06-19 19:36:59.000000000 +0200
+++ setup.py	2009-06-19 19:52:42.000000000 +0200
@@ -1310,6 +1310,14 @@ class PyBuildExt(build_ext):
                 )
             libraries = []
 
+        elif platform.startswith('irix'):
+            macros = dict(                  # IRIX
+                HAVE_SEM_OPEN=1,
+                HAVE_SEM_TIMEDWAIT=0,
+                HAVE_FD_TRANSFER=1,
+                )
+            libraries = []
+
         else:                                   # Linux and other unices
             macros = dict(
                 HAVE_SEM_OPEN=1,
--- Modules/_cursesmodule.c.orig	2009-06-19 19:52:36.000000000 +0200
+++ Modules/_cursesmodule.c	2009-06-19 19:52:42.000000000 +0200
@@ -120,9 +120,6 @@ char *PyCursesVersion = "2.2";
     curses module in other ways.  So the code will just specify 
     explicit prototypes here. */
 extern int setupterm(char *,int,int *);
-#ifdef __sgi
-#include <term.h>
-#endif
 
 #if !defined(HAVE_NCURSES_H) && (defined(sgi) || defined(__sun) || defined(SCO5))
 #define STRICT_SYSV_CURSES       /* Don't use ncurses extensions */
--- Modules/_fileio.c.orig	2009-06-19 19:52:36.000000000 +0200
+++ Modules/_fileio.c	2009-06-19 19:52:42.000000000 +0200
@@ -33,7 +33,7 @@ typedef struct {
 	unsigned readable : 1;
 	unsigned writable : 1;
 	int seekable : 2; /* -1 means unknown */
-	int closefd : 1;
+	unsigned int closefd : 1;
 	PyObject *weakreflist;
 } PyFileIOObject;
 
--- Modules/mmapmodule.c.orig	2009-06-19 19:52:36.000000000 +0200
+++ Modules/mmapmodule.c	2009-06-19 19:52:42.000000000 +0200
@@ -50,6 +50,10 @@ my_getallocationgranularity (void)
 #include <sys/mman.h>
 #include <sys/stat.h>
 
+#ifdef HAVE_FCNTL_H
+#include <fcntl.h>
+#endif
+
 #if defined(HAVE_SYSCONF) && defined(_SC_PAGESIZE)
 static int
 my_getpagesize(void)
--- Modules/posixmodule.c.orig	2009-06-19 19:52:36.000000000 +0200
+++ Modules/posixmodule.c	2009-06-19 19:52:42.000000000 +0200
@@ -169,7 +169,9 @@ corresponding Unix manual entries for mo
 extern char        *ctermid_r(char *);
 #endif
 
-#ifndef HAVE_UNISTD_H
+#ifdef HAVE_UNISTD_H
+#include <unistd.h>
+#else
 #if defined(PYCC_VACPP)
 extern int mkdir(char *);
 #else
--- configure.in.orig	2009-09-29 18:03:23 +0200
+++ configure.in	2009-09-29 18:06:45 +0200
@@ -1264,7 +1264,7 @@
 # checks for header files
 AC_HEADER_STDC
 AC_CHECK_HEADERS(asm/types.h conio.h curses.h direct.h dlfcn.h errno.h \
-fcntl.h grp.h \
+fcntl.h grp.h alloca.h \
 ieeefp.h io.h langinfo.h libintl.h ncurses.h poll.h process.h pthread.h \
 shadow.h signal.h stdint.h stropts.h termios.h thread.h \
 unistd.h utime.h \
--- Modules/_ctypes/_ctypes.c.orig	2009-04-05 23:48:06.000000000 +0200
+++ Modules/_ctypes/_ctypes.c	2009-06-19 19:52:42.000000000 +0200
@@ -111,11 +111,11 @@ bytes(cdata)
 
 #include <ffi.h>
 #ifdef MS_WIN32
-#include <windows.h>
-#include <malloc.h>
-#ifndef IS_INTRESOURCE
-#define IS_INTRESOURCE(x) (((size_t)(x) >> 16) == 0)
-#endif
+# include <windows.h>
+# include <malloc.h>
+# ifndef IS_INTRESOURCE
+#  define IS_INTRESOURCE(x) (((size_t)(x) >> 16) == 0)
+# endif
 # ifdef _WIN32_WCE
 /* Unlike desktop Windows, WinCE has both W and A variants of
    GetProcAddress, but the default W version is not what we want */
@@ -123,8 +123,11 @@ bytes(cdata)
 #  define GetProcAddress GetProcAddressA
 # endif
 #else
-#include "ctypes_dlfcn.h"
+# include "ctypes_dlfcn.h"
 #endif
+#ifdef HAVE_ALLOCA_H
+#include <alloca.h>
+#endif
 #include "ctypes.h"
 
 PyObject *PyExc_ArgError;
@@ -3854,7 +3857,7 @@ CFuncPtr_call(CFuncPtrObject *self, PyOb
 		}
 	}
 
-	result = _CallProc(pProc,
+	result = _CallProc((PPROC)pProc,
 			   callargs,
 #ifdef MS_WIN32
 			   piunk,
--- Modules/_ctypes/_ctypes_test.c.orig	2009-06-19 19:52:36.000000000 +0200
+++ Modules/_ctypes/_ctypes_test.c	2009-06-19 19:52:43.000000000 +0200
@@ -369,8 +369,8 @@ EXPORT(PY_LONG_LONG) last_tf_arg_s;
 EXPORT(unsigned PY_LONG_LONG) last_tf_arg_u;
 
 struct BITS {
-	int A: 1, B:2, C:3, D:4, E: 5, F: 6, G: 7, H: 8, I: 9;
-	short M: 1, N: 2, O: 3, P: 4, Q: 5, R: 6, S: 7;
+	unsigned int A: 1, B:2, C:3, D:4, E: 5, F: 6, G: 7, H: 8, I: 9;
+	unsigned short M: 1, N: 2, O: 3, P: 4, Q: 5, R: 6, S: 7;
 };
 
 DL_EXPORT(void) set_bitfields(struct BITS *bits, char name, int value)
--- Modules/_ctypes/callproc.c.orig	2009-02-10 19:46:11.000000000 +0100
+++ Modules/_ctypes/callproc.c	2009-06-19 19:52:43.000000000 +0200
@@ -73,6 +73,10 @@
 #include <malloc.h>
 #endif
 
+#ifdef HAVE_ALLOCA_H
+#include <alloca.h>
+#endif
+
 #include <ffi.h>
 #include "ctypes.h"
 
@@ -463,7 +467,7 @@ PyCArg_repr(PyCArgObject *self)
 #ifdef MS_WIN32
 			"<cparam '%c' (%I64d)>",
 #else
-			"<cparam '%c' (%qd)>",
+			"<cparam '%c' (%lld)>",
 #endif
 			self->tag, self->value.q);
 		break;
@@ -812,7 +816,7 @@ static int _call_function_pointer(int fl
 #endif
 		delta =
 #endif
-			ffi_call(&cif, (void *)pProc, resmem, avalues);
+			ffi_call(&cif, FFI_FN(pProc), resmem, avalues);
 #ifdef MS_WIN32
 #ifndef DONT_USE_SEH
 	}
--- Modules/_ctypes/malloc_closure.c.orig	2009-06-19 19:52:36.000000000 +0200
+++ Modules/_ctypes/malloc_closure.c	2009-06-19 19:52:43.000000000 +0200
@@ -5,12 +5,18 @@
 #include <Python.h>
 #include <ffi.h>
 #ifdef MS_WIN32
-#include <windows.h>
+# include <windows.h>
 #else
-#include <sys/mman.h>
-#include <unistd.h>
-# if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
-#  define MAP_ANONYMOUS MAP_ANON
+# include <sys/mman.h>
+# include <unistd.h>
+# if !defined(MAP_ANONYMOUS)
+#  if defined(MAP_ANON)
+#   define MAP_ANONYMOUS MAP_ANON
+#  else /* For open(), O_RDWR, etc. */
+#   include <sys/types.h>
+#   include <sys/stat.h>
+#   include <fcntl.h>
+#  endif
 # endif
 #endif
 #include "ctypes.h"
@@ -37,6 +43,8 @@ int _pagesize;
 static void more_core(void)
 {
 	ITEM *item;
+	int flags = MAP_PRIVATE;
+	int devzero = -1;
 	int count, i;
 
 /* determine the pagesize */
@@ -68,12 +76,24 @@ static void more_core(void)
 	if (item == NULL)
 		return;
 #else
+#ifdef MAP_ANONYMOUS
+		/* BSD way to map anonymous memory */
+		flags |= MAP_ANONYMOUS;
+#else
+		/* SVR4 method to map anonymous memory is to open /dev/zero */
+		devzero = open("/dev/zero", O_RDWR);
+		if (devzero == -1)
+			return;
+#endif
 	item = (ITEM *)mmap(NULL,
 			    count * sizeof(ITEM),
 			    PROT_READ | PROT_WRITE | PROT_EXEC,
-			    MAP_PRIVATE | MAP_ANONYMOUS,
-			    -1,
+			    flags,
+			    devzero,
 			    0);
+	if (devzero != -1)
+		close(devzero);
+
 	if (item == (void *)MAP_FAILED)
 		return;
 #endif
--- Modules/_ctypes/stgdict.c.orig	2009-06-19 19:52:36.000000000 +0200
+++ Modules/_ctypes/stgdict.c	2009-06-19 19:52:43.000000000 +0200
@@ -8,6 +8,9 @@
 #include <windows.h>
 #include <malloc.h>
 #endif
+#ifdef HAVE_ALLOCA_H
+#include <alloca.h>
+#endif
 #include "ctypes.h"
 
 /******************************************************************/
