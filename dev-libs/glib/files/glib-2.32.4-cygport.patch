diff -urN glib-2.32.4.orig/configure.ac glib-2.32.4/configure.ac
--- glib-2.32.4.orig/configure.ac	2012-09-07 01:21:39.150655700 -0700
+++ glib-2.32.4/configure.ac	2012-09-07 02:14:09.765788400 -0700
@@ -2539,9 +2539,6 @@
 dnl **********************
 
 case $host in
-  *-*-cygwin*)
-	G_LIBS_EXTRA="-luser32 -lkernel32"
-    ;;
   *-*-mingw*)
 	G_LIBS_EXTRA="-lws2_32 -lole32 -lwinmm -lshlwapi"
     ;;
diff -urN glib-2.32.4.orig/docs/reference/gio/Makefile.am glib-2.32.4/docs/reference/gio/Makefile.am
--- glib-2.32.4.orig/docs/reference/gio/Makefile.am	2012-09-07 01:21:39.153656000 -0700
+++ glib-2.32.4/docs/reference/gio/Makefile.am	2012-09-07 02:14:09.771789000 -0700
@@ -77,6 +77,8 @@
 	gunixvolume.h			\
 	gunixvolumemonitor.h		\
 	gwin32appinfo.h			\
+	gwin32inputstream.h		\
+	gwin32outputstream.h		\
 	gwin32mount.h			\
 	gwin32resolver.h		\
 	gwin32volumemonitor.h
diff -urN glib-2.32.4.orig/gio/gcredentials.c glib-2.32.4/gio/gcredentials.c
--- glib-2.32.4.orig/gio/gcredentials.c	2011-08-15 17:51:30.000000000 -0700
+++ glib-2.32.4/gio/gcredentials.c	2012-09-07 02:14:01.505962500 -0700
@@ -86,7 +86,7 @@
   /*< private >*/
   GObject parent_instance;
 
-#ifdef __linux__
+#if defined(__linux__) || defined(__CYGWIN__)
   struct ucred native;
 #elif defined(__FreeBSD__)
   struct cmsgcred native;
@@ -136,7 +136,7 @@
 static void
 g_credentials_init (GCredentials *credentials)
 {
-#ifdef __linux__
+#if defined(__linux__) || defined(__CYGWIN__)
   credentials->native.pid = getpid ();
   credentials->native.uid = geteuid ();
   credentials->native.gid = getegid ();
@@ -192,7 +192,7 @@
   g_return_val_if_fail (G_IS_CREDENTIALS (credentials), NULL);
 
   ret = g_string_new ("GCredentials:");
-#ifdef __linux__
+#if defined(__linux__) || defined(__CYGWIN__)
   g_string_append (ret, "linux-ucred:");
   if (credentials->native.pid != -1)
     g_string_append_printf (ret, "pid=%" G_GINT64_FORMAT ",", (gint64) credentials->native.pid);
@@ -257,7 +257,7 @@
   g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
 
   ret = FALSE;
-#ifdef __linux__
+#if defined(__linux__) || defined(__CYGWIN__)
   if (credentials->native.uid == other_credentials->native.uid)
     ret = TRUE;
 #elif defined(__FreeBSD__)
@@ -305,7 +305,7 @@
 
   ret = NULL;
 
-#ifdef __linux__
+#if defined(__linux__) || defined(__CYGWIN__)
   if (native_type != G_CREDENTIALS_TYPE_LINUX_UCRED)
     {
       g_warning ("g_credentials_get_native: Trying to get credentials of type %d but only "
@@ -366,7 +366,7 @@
                           GCredentialsType  native_type,
                           gpointer          native)
 {
-#ifdef __linux__
+#if defined(__linux__) || defined(__CYGWIN__)
   if (native_type != G_CREDENTIALS_TYPE_LINUX_UCRED)
     {
       g_warning ("g_credentials_set_native: Trying to set credentials of type %d "
@@ -433,7 +433,7 @@
   g_return_val_if_fail (G_IS_CREDENTIALS (credentials), -1);
   g_return_val_if_fail (error == NULL || *error == NULL, -1);
 
-#ifdef __linux__
+#if defined(__linux__) || defined(__CYGWIN__)
   ret = credentials->native.uid;
 #elif defined(__FreeBSD__)
   ret = credentials->native.cmcred_euid;
@@ -479,7 +479,7 @@
   g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
 
   ret = FALSE;
-#ifdef __linux__
+#if defined(__linux__) || defined(__CYGWIN__)
   credentials->native.uid = uid;
   ret = TRUE;
 #elif defined(__FreeBSD__)
diff -urN glib-2.32.4.orig/gio/giomodule-priv.h glib-2.32.4/gio/giomodule-priv.h
--- glib-2.32.4.orig/gio/giomodule-priv.h	2012-05-14 14:58:06.000000000 -0700
+++ glib-2.32.4/gio/giomodule-priv.h	2012-09-07 02:14:09.813793200 -0700
@@ -35,7 +35,7 @@
 				   const gchar         *envvar,
 				   GIOModuleVerifyFunc  verify_func);
 
-#ifdef G_PLATFORM_WIN32
+#ifdef G_OS_WIN32
 void *_g_io_win32_get_module (void);
 #endif
 
diff -urN glib-2.32.4.orig/gio/giomodule.c glib-2.32.4/gio/giomodule.c
--- glib-2.32.4.orig/gio/giomodule.c	2012-07-14 05:39:30.000000000 -0700
+++ glib-2.32.4/gio/giomodule.c	2012-09-07 02:14:09.818793700 -0700
@@ -776,7 +776,7 @@
 extern GType _g_network_monitor_netlink_get_type (void);
 #endif
 
-#ifdef G_PLATFORM_WIN32
+#ifdef G_OS_WIN32
 
 #include <windows.h>
 
diff -urN glib-2.32.4.orig/gio/tests/live-g-file.c glib-2.32.4/gio/tests/live-g-file.c
--- glib-2.32.4.orig/gio/tests/live-g-file.c	2011-08-15 17:51:30.000000000 -0700
+++ glib-2.32.4/gio/tests/live-g-file.c	2012-09-07 02:14:09.853797200 -0700
@@ -1147,7 +1147,7 @@
 	  write_test = TRUE;
 	  only_create_struct = FALSE;
 	  target_path = DEFAULT_TEST_DIR;
-#ifdef G_PLATFORM_WIN32
+#ifdef G_OS_WIN32
 	  posix_compat = FALSE;
 #else
 	  posix_compat = TRUE;
diff -urN glib-2.32.4.orig/glib/gatomic.c glib-2.32.4/glib/gatomic.c
--- glib-2.32.4.orig/glib/gatomic.c	2012-03-11 17:42:41.000000000 -0700
+++ glib-2.32.4/glib/gatomic.c	2012-09-07 02:14:09.899801800 -0700
@@ -464,7 +464,7 @@
   return g_atomic_pointer_xor ((volatile gpointer *) atomic, val);
 }
 
-#elif defined (G_PLATFORM_WIN32)
+#elif defined (G_OS_WIN32)
 
 #include <windows.h>
 #if !defined(_M_AMD64) && !defined (_M_IA64) && !defined(_M_X64)
diff -urN glib-2.32.4.orig/glib/gcharset.c glib-2.32.4/glib/gcharset.c
--- glib-2.32.4.orig/glib/gcharset.c	2012-03-11 17:42:41.000000000 -0700
+++ glib-2.32.4/glib/gcharset.c	2012-09-07 02:14:09.904802300 -0700
@@ -496,7 +496,7 @@
   if ((retval != NULL) && (retval[0] != '\0'))
     return retval;
 
-#ifdef G_PLATFORM_WIN32
+#ifdef G_OS_WIN32
   /* g_win32_getlocale() first checks for LC_ALL, LC_MESSAGES and
    * LANG, which we already did above. Oh well. The main point of
    * calling g_win32_getlocale() is to get the thread's locale as used
diff -urN glib-2.32.4.orig/glib/gconvert.c glib-2.32.4/glib/gconvert.c
--- glib-2.32.4.orig/glib/gconvert.c	2012-07-14 05:39:31.000000000 -0700
+++ glib-2.32.4/glib/gconvert.c	2012-09-07 02:14:09.912803100 -0700
@@ -33,9 +33,6 @@
 
 #ifdef G_OS_WIN32
 #include "win_iconv.c"
-#endif
-
-#ifdef G_PLATFORM_WIN32
 #define STRICT
 #include <windows.h>
 #undef STRICT
@@ -1262,7 +1259,7 @@
 		      charset, "UTF-8", bytes_read, bytes_written, error);
 }
 
-#ifndef G_PLATFORM_WIN32
+#ifndef G_OS_WIN32
 
 typedef struct _GFilenameCharsetCache GFilenameCharsetCache;
 
@@ -1378,7 +1375,7 @@
   return cache->is_utf8;
 }
 
-#else /* G_PLATFORM_WIN32 */
+#else /* G_OS_WIN32 */
 
 gboolean
 g_get_filename_charsets (const gchar ***filename_charsets) 
@@ -1407,7 +1404,7 @@
 #endif
 }
 
-#endif /* G_PLATFORM_WIN32 */
+#endif /* G_OS_WIN32 */
 
 static gboolean
 get_filename_charset (const gchar **filename_charset)
diff -urN glib-2.32.4.orig/glib/gfileutils.c glib-2.32.4/glib/gfileutils.c
--- glib-2.32.4.orig/glib/gfileutils.c	2012-07-14 13:33:13.000000000 -0700
+++ glib-2.32.4/glib/gfileutils.c	2012-09-07 02:14:09.942806100 -0700
@@ -2175,7 +2175,7 @@
 {
   g_return_val_if_fail (file_name != NULL, NULL);
 
-#ifdef G_PLATFORM_WIN32
+#ifdef G_OS_WIN32
   /* Skip \\server\share or //server/share */
   if (G_IS_DIR_SEPARATOR (file_name[0]) &&
       G_IS_DIR_SEPARATOR (file_name[1]) &&
@@ -2185,7 +2185,6 @@
       gchar *p;
       p = strchr (file_name + 2, G_DIR_SEPARATOR);
 
-#ifdef G_OS_WIN32
       {
         gchar *q;
 
@@ -2193,7 +2192,6 @@
         if (p == NULL || (q != NULL && q < p))
         p = q;
       }
-#endif
 
       if (p && p > file_name + 2 && p[1])
         {
diff -urN glib-2.32.4.orig/glib/glib.h glib-2.32.4/glib/glib.h
--- glib-2.32.4.orig/glib/glib.h	2012-03-11 17:42:41.000000000 -0700
+++ glib-2.32.4/glib/glib.h	2012-09-07 02:14:09.947806600 -0700
@@ -96,7 +96,7 @@
 #include <glib/gvariant.h>
 #include <glib/gversion.h>
 #include <glib/gversionmacros.h>
-#ifdef G_PLATFORM_WIN32
+#ifdef G_OS_WIN32
 #include <glib/gwin32.h>
 #endif
 
diff -urN glib-2.32.4.orig/glib/gutf8.c glib-2.32.4/glib/gutf8.c
--- glib-2.32.4.orig/glib/gutf8.c	2012-07-14 13:33:12.000000000 -0700
+++ glib-2.32.4/glib/gutf8.c	2012-09-07 02:14:09.978809700 -0700
@@ -27,7 +27,7 @@
 #endif
 #include <string.h>
 
-#ifdef G_PLATFORM_WIN32
+#ifdef G_OS_WIN32
 #include <stdio.h>
 #define STRICT
 #include <windows.h>
diff -urN glib-2.32.4.orig/glib/gutils.c glib-2.32.4/glib/gutils.c
--- glib-2.32.4.orig/glib/gutils.c	2012-07-14 13:33:11.000000000 -0700
+++ glib-2.32.4/glib/gutils.c	2012-09-07 02:14:10.005812400 -0700
@@ -71,7 +71,7 @@
 #include "garray.h"
 #include "glibintl.h"
 
-#ifdef G_PLATFORM_WIN32
+#ifdef G_OS_WIN32
 #include "gconvert.h"
 #include "gwin32.h"
 #endif
@@ -85,16 +85,13 @@
  * These are portable utility functions.
  */
 
-#ifdef G_PLATFORM_WIN32
+#ifdef G_OS_WIN32
 #  include <windows.h>
 #  ifndef GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS
 #    define GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT 2
 #    define GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS 4
 #  endif
 #  include <lmcons.h>		/* For UNLEN */
-#endif /* G_PLATFORM_WIN32 */
-
-#ifdef G_OS_WIN32
 #  include <direct.h>
 #  include <shlobj.h>
    /* older SDK (e.g. msvc 5.0) does not have these*/
@@ -130,7 +127,7 @@
 #include <langinfo.h>
 #endif
 
-#ifdef G_PLATFORM_WIN32
+#ifdef G_OS_WIN32
 
 gchar *
 _glib_get_dll_directory (void)
diff -urN glib-2.32.4.orig/glib/gutils.h glib-2.32.4/glib/gutils.h
--- glib-2.32.4.orig/glib/gutils.h	2012-07-14 12:17:32.000000000 -0700
+++ glib-2.32.4/glib/gutils.h	2012-09-07 02:14:10.010812900 -0700
@@ -342,7 +342,7 @@
  * On non-Windows platforms, expands to nothing.
  */
 
-#ifndef G_PLATFORM_WIN32
+#ifndef G_OS_WIN32
 # define G_WIN32_DLLMAIN_FOR_DLL_NAME(static, dll_name)
 #else
 # define G_WIN32_DLLMAIN_FOR_DLL_NAME(static, dll_name)			\
@@ -370,6 +370,6 @@
 
 #endif	/* !G_DISABLE_DEPRECATED */
 
-#endif /* G_PLATFORM_WIN32 */
+#endif /* G_OS_WIN32 */
 
 #endif /* __G_UTILS_H__ */
diff -urN glib-2.32.4.orig/glib/gwin32.h glib-2.32.4/glib/gwin32.h
--- glib-2.32.4.orig/glib/gwin32.h	2012-03-11 17:42:42.000000000 -0700
+++ glib-2.32.4/glib/gwin32.h	2012-09-07 02:14:10.017813600 -0700
@@ -33,7 +33,7 @@
 
 #include <glib/gtypes.h>
 
-#ifdef G_PLATFORM_WIN32
+#ifdef G_OS_WIN32
 
 G_BEGIN_DECLS
 
@@ -41,8 +41,6 @@
 #define MAXPATHLEN 1024
 #endif
 
-#ifdef G_OS_WIN32
-
 /*
  * To get prototypes for the following POSIXish functions, you have to
  * include the indicated non-POSIX headers. The functions are defined
@@ -67,7 +65,6 @@
  */
 gint		g_win32_ftruncate	(gint		 f,
 					 guint		 size);
-#endif /* G_OS_WIN32 */
 
 /* The MS setlocale uses locale names of the form "English_United
  * States.1252" etc. We want the Unixish standard form "en", "zh_TW"
@@ -113,6 +110,6 @@
 
 G_END_DECLS
 
-#endif	 /* G_PLATFORM_WIN32 */
+#endif	 /* G_OS_WIN32 */
 
 #endif /* __G_WIN32_H__ */
diff -urN glib-2.32.4.orig/glib/libcharset/localcharset.c glib-2.32.4/glib/libcharset/localcharset.c
--- glib-2.32.4.orig/glib/libcharset/localcharset.c	2011-08-15 17:51:30.000000000 -0700
+++ glib-2.32.4/glib/libcharset/localcharset.c	2012-09-07 02:14:10.047816600 -0700
@@ -46,10 +46,6 @@
 #   include <locale.h>
 #  endif
 # endif
-# ifdef __CYGWIN__
-#  define WIN32_LEAN_AND_MEAN
-#  include <windows.h>
-# endif
 #elif defined WIN32_NATIVE
 # define WIN32_LEAN_AND_MEAN
 # include <windows.h>
@@ -111,7 +107,7 @@
   cp = charset_aliases;
   if (cp == NULL)
     {
-#if !(defined VMS || defined WIN32_NATIVE || defined __CYGWIN__)
+#if !(defined VMS || defined WIN32_NATIVE)
       FILE *fp;
       const char *dir;
       const char *base = "charset.alias";
@@ -237,7 +233,7 @@
 	   "DECKOREAN" "\0" "EUC-KR" "\0";
 # endif
 
-# if defined WIN32_NATIVE || defined __CYGWIN__
+# if defined WIN32_NATIVE
       /* To avoid the troubles of installing a separate file in the same
 	 directory as the DLL and of retrieving the DLL's directory at
 	 runtime, simply inline the aliases here.  */
@@ -292,53 +288,6 @@
   /* Most systems support nl_langinfo (CODESET) nowadays.  */
   codeset = nl_langinfo (CODESET);
 
-#  ifdef __CYGWIN__
-  /* Cygwin 2006 does not have locales.  nl_langinfo (CODESET) always
-     returns "US-ASCII".  As long as this is not fixed, return the suffix
-     of the locale name from the environment variables (if present) or
-     the codepage as a number.  */
-  if (codeset != NULL && strcmp (codeset, "US-ASCII") == 0)
-    {
-      const char *locale;
-      static char buf[2 + 10 + 1];
-
-      locale = getenv ("LC_ALL");
-      if (locale == NULL || locale[0] == '\0')
-	{
-	  locale = getenv ("LC_CTYPE");
-	  if (locale == NULL || locale[0] == '\0')
-	    locale = getenv ("LANG");
-	}
-      if (locale != NULL && locale[0] != '\0')
-	{
-	  /* If the locale name contains an encoding after the dot, return
-	     it.  */
-	  const char *dot = strchr (locale, '.');
-
-	  if (dot != NULL)
-	    {
-	      const char *modifier;
-
-	      dot++;
-	      /* Look for the possible @... trailer and remove it, if any.  */
-	      modifier = strchr (dot, '@');
-	      if (modifier == NULL)
-		return dot;
-	      if (modifier - dot < sizeof (buf))
-		{
-		  memcpy (buf, dot, modifier - dot);
-		  buf [modifier - dot] = '\0';
-		  return buf;
-		}
-	    }
-	}
-
-      /* Woe32 has a function returning the locale's codepage as a number.  */
-      sprintf (buf, "CP%u", GetACP ());
-      codeset = buf;
-    }
-#  endif
-
 # else
 
   /* On old systems which lack it, use setlocale or getenv.  */
diff -urN glib-2.32.4.orig/glib/tests/uri.c glib-2.32.4/glib/tests/uri.c
--- glib-2.32.4.orig/glib/tests/uri.c	2012-03-11 17:42:42.000000000 -0700
+++ glib-2.32.4/glib/tests/uri.c	2012-09-07 02:14:10.052817100 -0700
@@ -56,7 +56,7 @@
   { "c:\\windows", "otherhost", NULL, G_CONVERT_ERROR_NOT_ABSOLUTE_PATH},
 #endif
   { "etc", "localhost", NULL, G_CONVERT_ERROR_NOT_ABSOLUTE_PATH},
-#ifndef G_PLATFORM_WIN32
+#ifndef G_OS_WIN32
   { "/etc/\xE5\xE4\xF6", NULL, "file:///etc/%E5%E4%F6" },
   { "/etc/\xC3\xB6\xC3\xA4\xC3\xA5", NULL, "file:///etc/%C3%B6%C3%A4%C3%A5"},
 #endif
diff -urN glib-2.32.4.orig/gmodule/gmodule-win32.c glib-2.32.4/gmodule/gmodule-win32.c
--- glib-2.32.4.orig/gmodule/gmodule-win32.c	2011-08-15 17:51:30.000000000 -0700
+++ glib-2.32.4/gmodule/gmodule-win32.c	2012-09-07 02:13:52.707082700 -0700
@@ -38,8 +38,23 @@
 #include <tlhelp32.h>
 
 #ifdef G_WITH_CYGWIN
-#include <sys/cygwin.h>
-#endif
+#include <dlfcn.h>
+
+static gchar*
+fetch_dlerror (gboolean replace_null)
+{
+  gchar *msg = dlerror ();
+
+  /* make sure we always return an error message != NULL, if
+   * expected to do so. */
+
+  if (!msg && replace_null)
+    return "unknown dl-error";
+
+  return msg;
+}
+
+#else
 
 static void
 set_error (const gchar *format,
@@ -64,20 +79,28 @@
   g_free (error);
 }
 
+#endif
+
 /* --- functions --- */
 static gpointer
 _g_module_open (const gchar *file_name,
 		gboolean     bind_lazy,
 		gboolean     bind_local)
 {
+#ifdef G_WITH_CYGWIN
+  gpointer handle;
+
+  handle = dlopen (file_name,
+          (bind_local ? 0 : RTLD_GLOBAL) | (bind_lazy ? RTLD_LAZY : RTLD_NOW));
+  if (!handle)
+    g_module_set_error (fetch_dlerror (TRUE));
+#else
   HINSTANCE handle;
   wchar_t *wfilename;
-#ifdef G_WITH_CYGWIN
   gchar tmp[MAX_PATH];
 
   cygwin_conv_to_win32_path(file_name, tmp);
   file_name = tmp;
-#endif
   wfilename = g_utf8_to_utf16 (file_name, -1, NULL, NULL, NULL);
 
   handle = LoadLibraryW (wfilename);
@@ -85,6 +108,7 @@
       
   if (!handle)
     set_error ("`%s': ", file_name);
+#endif
 
   return handle;
 }
@@ -95,16 +119,41 @@
 static gpointer
 _g_module_self (void)
 {
+#ifdef G_WITH_CYGWIN
+  gpointer handle;
+
+  /* to query symbols from the program itself, special link options
+   * are required on some systems.
+   */
+
+  handle = dlopen (NULL, RTLD_GLOBAL | RTLD_LAZY);
+  if (!handle)
+    g_module_set_error (fetch_dlerror (TRUE));
+
+  return handle;
+#else
   return null_module_handle;
+#endif
 }
 
 static void
 _g_module_close (gpointer handle,
 		 gboolean is_unref)
 {
+#ifdef G_WITH_CYGWIN
+  /* are there any systems out there that have dlopen()/dlclose()
+   * without a reference count implementation?
+   */
+  is_unref |= 1;
+
+  if (is_unref)
+    if (dlclose (handle) != 0)
+      g_module_set_error (fetch_dlerror (TRUE));
+#else
   if (handle != null_module_handle)
     if (!FreeLibrary (handle))
       set_error ("");
+#endif
 }
 
 static gpointer
@@ -150,6 +199,13 @@
 {
   gpointer p;
   
+#ifdef G_WITH_CYGWIN
+  p = dlsym (handle, symbol_name);
+  if (!p)
+	p = find_in_any_module (symbol_name);
+  if (!p)
+    g_module_set_error (fetch_dlerror (FALSE));
+#else
   if (handle == null_module_handle)
     {
       if ((p = GetProcAddress (GetModuleHandle (NULL), symbol_name)) == NULL)
@@ -160,6 +216,7 @@
 
   if (!p)
     set_error ("");
+#endif
 
   return p;
 }
diff -urN glib-2.32.4.orig/tests/Makefile.am glib-2.32.4/tests/Makefile.am
--- glib-2.32.4.orig/tests/Makefile.am	2012-09-07 01:21:38.660606700 -0700
+++ glib-2.32.4/tests/Makefile.am	2012-09-07 02:14:10.057817600 -0700
@@ -20,7 +20,9 @@
 libadd_libglib = $(libglib)
 if PLATFORM_WIN32
 no_undefined = -no-undefined
+endif
 
+if OS_WIN32
 module_test_exp = module-test.exp
 
 module-test.exp: module-test.o
diff -urN glib-2.32.4.orig/tests/module-test.c glib-2.32.4/tests/module-test.c
--- glib-2.32.4.orig/tests/module-test.c	2011-08-15 17:51:30.000000000 -0700
+++ glib-2.32.4/tests/module-test.c	2012-09-07 02:13:41.456957800 -0700
@@ -85,9 +85,15 @@
 
   dir = g_get_current_dir ();
 
-  plugin_a = g_strconcat (dir, G_DIR_SEPARATOR_S "libmoduletestplugin_a", 
+#ifdef G_WITH_CYGWIN
+#define PLUGIN_NAME ".libs/cygmoduletestplugin"
+#else
+#define PLUGIN_NAME "libmoduletestplugin"
+#endif
+
+  plugin_a = g_strconcat (dir, G_DIR_SEPARATOR_S PLUGIN_NAME "_a", 
 			  NULL);
-  plugin_b = g_strconcat (dir, G_DIR_SEPARATOR_S "libmoduletestplugin_b", 
+  plugin_b = g_strconcat (dir, G_DIR_SEPARATOR_S PLUGIN_NAME "_b", 
 			  NULL);
 
   g_free (dir);
@@ -96,38 +102,40 @@
   
   module_self = g_module_open (NULL, G_MODULE_BIND_LAZY);
   if (!module_self)
-    g_error ("error: %s", g_module_error ());
+    g_error ("error1: %s", g_module_error ());
 
+#ifndef G_WITH_CYGWIN
   if (!g_module_symbol (module_self, "g_module_close", (gpointer *) &f_self))
-    g_error ("error: %s", g_module_error ());
+    g_error ("error2: %s", g_module_error ());
+#endif
 
   module_a = g_module_open (plugin_a, G_MODULE_BIND_LAZY);
   if (!module_a)
-    g_error ("error: %s", g_module_error ());
+    g_error ("error3: %s", g_module_error ());
 
   module_b = g_module_open (plugin_b, G_MODULE_BIND_LAZY);
   if (!module_b)
-    g_error ("error: %s", g_module_error ());
+    g_error ("error4: %s", g_module_error ());
 
   /* get plugin state vars */
 
   if (!g_module_symbol (module_a, "gplugin_a_state", 
 			(gpointer *) &gplugin_a_state))
-    g_error ("error: %s", g_module_error ());
+    g_error ("error5: %s", g_module_error ());
   
   if (!g_module_symbol (module_b, "gplugin_b_state", 
 			(gpointer *) &gplugin_b_state))
-    g_error ("error: %s", g_module_error ());
+    g_error ("error6: %s", g_module_error ());
   test_states (NULL, NULL, "check-init");
   
   /* get plugin specific symbols and call them
    */
   if (!g_module_symbol (module_a, "gplugin_a_func", (gpointer *) &f_a))
-    g_error ("error: %s", g_module_error ());
+    g_error ("error7: %s", g_module_error ());
   test_states (NULL, NULL, NULL);
  
   if (!g_module_symbol (module_b, "gplugin_b_func", (gpointer *) &f_b))
-    g_error ("error: %s", g_module_error ());
+    g_error ("error8: %s", g_module_error ());
   test_states (NULL, NULL, NULL);
  
   f_a ();
@@ -140,15 +148,15 @@
    */
  
   if (!g_module_symbol (module_self, "g_clash_func", (gpointer *) &f_self))
-    g_error ("error: %s", g_module_error ());
+    g_error ("error9: %s", g_module_error ());
   test_states (NULL, NULL, NULL);
 
   if (!g_module_symbol (module_a, "g_clash_func", (gpointer *) &f_a))
-    g_error ("error: %s", g_module_error ());
+    g_error ("error10: %s", g_module_error ());
   test_states (NULL, NULL, NULL);
  
   if (!g_module_symbol (module_b, "g_clash_func", (gpointer *) &f_b))
-    g_error ("error: %s", g_module_error ());
+    g_error ("error11: %s", g_module_error ());
   test_states (NULL, NULL, NULL);
  
   f_self ();
@@ -163,11 +171,11 @@
   /* get and call clashing plugin functions  */
 
   if (!g_module_symbol (module_a, "gplugin_clash_func", (gpointer *) &f_a))
-    g_error ("error: %s", g_module_error ());
+    g_error ("error12: %s", g_module_error ());
   test_states (NULL, NULL, NULL);
 
   if (!g_module_symbol (module_b, "gplugin_clash_func", (gpointer *) &f_b))
-    g_error ("error: %s", g_module_error ());
+    g_error ("error13: %s", g_module_error ());
   test_states (NULL, NULL, NULL);
 
   plugin_clash_func = f_a;
@@ -181,7 +189,7 @@
   /* call gmodule function from A  */
 
   if (!g_module_symbol (module_a, "gplugin_a_module_func", (gpointer *) &gmod_f))
-    g_error ("error: %s", g_module_error ());
+    g_error ("error14: %s", g_module_error ());
   test_states (NULL, NULL, NULL);
 
   gmod_f (module_b);
@@ -193,10 +201,10 @@
   /* unload plugins  */
 
   if (!g_module_close (module_a))
-    g_error ("error: %s", g_module_error ());
+    g_error ("error15: %s", g_module_error ());
 
   if (!g_module_close (module_b))
-    g_error ("error: %s", g_module_error ());
+    g_error ("error16: %s", g_module_error ());
  
   return 0;
 }
diff -urN glib-2.32.4.orig/tests/testglib.c glib-2.32.4/tests/testglib.c
--- glib-2.32.4.orig/tests/testglib.c	2012-03-11 17:42:43.000000000 -0700
+++ glib-2.32.4/tests/testglib.c	2012-09-07 02:14:10.084820300 -0700
@@ -776,7 +776,7 @@
 
   if (g_test_verbose())
     {
-#ifdef G_PLATFORM_WIN32
+#ifdef G_OS_WIN32
       g_print ("current locale: %s\n", g_win32_getlocale ());
 
       g_print ("found more.com as %s\n", g_find_program_in_path ("more.com"));
