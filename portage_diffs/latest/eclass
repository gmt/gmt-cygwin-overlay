===== mutual sub-directory: "eclass" =====
--("eclass/libtool.eclass")-->8-->
--- usr/portage/eclass/libtool.eclass	2011-12-26 04:01:34.000000000 -0800
+++ overlay/eclass/libtool.eclass	2012-02-23 21:41:53.532515500 -0800
@@ -1,6 +1,6 @@
 # Copyright 1999-2011 Gentoo Foundation
 # Distributed under the terms of the GNU General Public License v2
-# $Header: /var/cvsroot/gentoo-x86/eclass/libtool.eclass,v 1.98 2011/12/21 21:21:04 vapier Exp $
+# $Header: /var/cvsroot/gentoo-x86/eclass/libtool.eclass,v 1.96 2011/11/18 17:32:14 vapier Exp $
 
 # @ECLASS: libtool.eclass
 # @MAINTAINER:
@@ -14,9 +14,6 @@
 # generated libtool files.  We do not run the libtoolize program because that
 # requires a regeneration of the main autotool files in order to work properly.
 
-if [[ ${___ECLASS_ONCE_LIBTOOL} != "recur -_+^+_- spank" ]] ; then
-___ECLASS_ONCE_LIBTOOL="recur -_+^+_- spank"
-
 # If an overlay has eclass overrides, but doesn't actually override the
 # libtool.eclass, we'll have ECLASSDIR pointing to the active overlay's
 # eclass/ dir, but libtool.eclass is still in the main Gentoo tree.  So
@@ -27,6 +24,9 @@
 	if [[ ! -d ${d} ]] ; then
 		d="${ECLASSDIR_LOCAL}/ELT-patches"
 	fi
+	if [[ $1 == --local ]] ; then
+		d="${ECLASSDIR_LOCAL}/ELT-patches"
+	fi
 	echo "${d}"
 }
 
@@ -85,10 +85,22 @@
 	local file=$1
 	local patch_set=$2
 	local patch_dir="$(elt_patch_dir)/${patch_set}"
+	local patch_dir_local="$(elt_patch_dir --local)/${patch_set}"
+	local dualmode=1
 	local rem_int_dep=$3
 
+	[[ "${patch_dir}" == "${patch_dir_local}" ]] && dualmode=0
+	[[ ! -d "${patch_dir}" ]] && dualmode=0
+
 	[[ -z ${patch_set} ]] && return 1
+
+	if [[ ${dualmode} == 0 ]] ; then
+		[[ ! -d ${patch_dir_local} ]] && return 1
+	else
+		if [[ ! -d ${patch_dir_local} ]] ; then
 	[[ ! -d ${patch_dir} ]] && return 1
+		fi
+	fi
 
 	# Allow patches to use @GENTOO_LIBDIR@ replacements
 	local sed_args=( -e "s:@GENTOO_LIBDIR@:$(get_libdir):g" )
@@ -98,7 +110,36 @@
 		sed_args+=( -e "s|@REM_INT_DEP@|${rem_int_dep}|g" )
 	fi
 
-	pushd "$(elt_patch_dir)" >/dev/null || die
+	local eltpatchdir='!none'
+	local localeltpatchdir="$( elt_patch_dir --local )"
+
+	[[ ${dualmode} == 1 ]] && \
+		eltpatchdir="$( elt_patch_dir )"
+
+	if [[ ! -d "${localeltpatchdir}" ]] ; then
+		localeltpatchdir='!none'
+	elif [[ ! -d "${localeltpatchdir}/${patch_set}" ]] ; then
+		localeltpatchdir='!none'
+	fi
+
+	if [[ ${eltpatchdir} != \!none ]] ; then
+		if [[ ! -d "${eltpatchdir}" ]] ; then
+			eltpatchdir='!none'
+		elif [[ ! -d "${eltpatchdir}/${patch_set}" ]] ; then
+			eltpatchdir='!none'
+		fi
+	fi
+
+	[[ ${eltpatchdir} == \!none && ${localeltpatchdir} == \!none ]] && return 1
+
+	# einfo "::${patch_set}:: localeltpatchdir=\"${localeltpatchdir}\" eltpatchdir=\"${eltpatchdir}\""
+
+	for i_eltpatchdir in "${localeltpatchdir}" "${eltpatchdir}" ; do
+	# >>>>>>>>>>>>>>>>>
+
+	[[ ${i_eltpatchdir} == \!none ]] && continue
+
+	pushd "${i_eltpatchdir}" >/dev/null || die
 
 	# Go through the patches in reverse order (newer version to older)
 	for patch in $(find "${patch_set}" -maxdepth 1 -type f | LC_ALL=C sort -r) ; do
@@ -112,6 +153,11 @@
 	done
 
 	popd >/dev/null
+	[[ ${ret} == 0 ]] && break;
+
+	# <<<<<<<<<<<<<<<<<<<
+	done
+
 	return ${ret}
 }
 
@@ -186,6 +232,7 @@
 		*-hpux*)    elt_patches+=" hpux-conf deplibs hc-flag-ld hardcode hardcode-relink relink-prog no-lc" ;;
 		*-irix*)    elt_patches+=" irix-ltmain" ;;
 		*-mint*)    elt_patches+=" mint-conf" ;;
+		*-cygwin*)  elt_patches+=" cygwin-ltmain cygwin-install-sh" ;;
 	esac
 
 	if $(tc-getLD) --version 2>&1 | grep -qs 'GNU gold'; then
@@ -208,10 +255,8 @@
 			${force} || continue
 		fi
 
-		local outfunc="einfo"
-		[[ -f ${d}/.elibtoolized ]] && outfunc="ewarn"
-		${outfunc} "Running elibtoolize in: ${d#${WORKDIR}/}/"
-		if [[ ${outfunc} == "ewarn" ]] ; then
+		einfo "Running elibtoolize in: ${d#${WORKDIR}/}/"
+		if [[ -f ${d}/.elibtoolized ]] ; then
 			ewarn "  We've already been run in this tree; you should"
 			ewarn "  avoid this if possible (perhaps by filing a bug)"
 		fi
@@ -361,6 +406,10 @@
 						ret=$?
 					fi
 					;;
+				cygwin-install-sh)
+					ELT_walk_patches "${d}/install-sh" "${p}"
+					ret=$?
+					;;
 				*)
 					ELT_walk_patches "${d}/ltmain.sh" "${p}"
 					ret=$?
@@ -502,5 +551,3 @@
 	echo 1
 	return 1
 }
-
-fi
<--8<--
--("eclass/multilib.eclass")-->8-->
--- usr/portage/eclass/multilib.eclass	2011-12-14 10:32:03.000000000 -0800
+++ overlay/eclass/multilib.eclass	2012-02-24 13:06:29.975677300 -0800
@@ -1,6 +1,6 @@
 # Copyright 1999-2011 Gentoo Foundation
 # Distributed under the terms of the GNU General Public License v2
-# $Header: /var/cvsroot/gentoo-x86/eclass/multilib.eclass,v 1.97 2011/12/14 18:15:09 slyfox Exp $
+# $Header: /var/cvsroot/gentoo-x86/eclass/multilib.eclass,v 1.95 2011/10/27 05:50:40 vapier Exp $
 
 # @ECLASS: multilib.eclass
 # @MAINTAINER:
@@ -10,10 +10,8 @@
 # @DESCRIPTION:
 # This eclass is for all functions pertaining to handling multilib configurations.
 
-if [[ ${___ECLASS_ONCE_MULTILIB} != "recur -_+^+_- spank" ]] ; then
-___ECLASS_ONCE_MULTILIB="recur -_+^+_- spank"
-
-inherit toolchain-funcs
+___ECLASS_RECUR_MULTILIB="yes"
+[[ -z ${___ECLASS_RECUR_TOOLCHAIN_FUNCS} ]] && inherit toolchain-funcs
 
 # Defaults:
 export MULTILIB_ABIS=${MULTILIB_ABIS:-"default"}
@@ -231,7 +229,7 @@
 	local libname
 	local ver=$1
 	case ${CHOST} in
-		*-cygwin|mingw*|*-mingw*) libname="dll";;
+		*-cygwin*|mingw*|*-mingw*) libname="dll";;
 		*-darwin*)                libname="dylib";;
 		*-mint*)                  libname="irrelevant";;
 		hppa*-hpux*)              libname="sl";;
@@ -348,7 +346,7 @@
 			: ${DEFAULT_ABI=s390x}
 		;;
 		sparc*)
-			export CFLAGS_sparc32=${CFLAGS_sparc32--m32}
+			export CFLAGS_sparc32=${CFLAGS_sparc32}
 			export CHOST_sparc32=${CTARGET/sparc64/sparc}
 			export CTARGET_sparc32=${CHOST_sparc32}
 			export LIBDIR_sparc32="lib"
@@ -408,5 +406,3 @@
 		export CBUILD=$(get_abi_CHOST $1)
 	fi
 }
-
-fi
<--8<--
--("eclass/toolchain.eclass")-->8-->
--- usr/portage/eclass/toolchain.eclass	2012-03-03 20:01:32.000000000 -0800
+++ overlay/eclass/toolchain.eclass	2012-02-24 15:16:51.853015500 -0800
@@ -1,6 +1,6 @@
-# Copyright 1999-2012 Gentoo Foundation
+# Copyright 1999-2011 Gentoo Foundation
 # Distributed under the terms of the GNU General Public License v2
-# $Header: /var/cvsroot/gentoo-x86/eclass/toolchain.eclass,v 1.519 2012/03/02 05:56:29 vapier Exp $
+# $Header: /var/cvsroot/gentoo-x86/eclass/toolchain.eclass,v 1.487 2011/12/03 02:06:31 vapier Exp $
 #
 # Maintainer: Toolchain Ninjas <toolchain@gentoo.org>
 
@@ -9,7 +9,7 @@
 LICENSE="GPL-2 LGPL-2.1"
 RESTRICT="strip" # cross-compilers need controlled stripping
 
-inherit eutils versionator libtool toolchain-funcs flag-o-matic gnuconfig multilib fixheadtails pax-utils prefix
+inherit eutils versionator libtool toolchain-funcs flag-o-matic gnuconfig multilib fixheadtails prefix
 
 EXPORT_FUNCTIONS pkg_setup src_unpack src_compile src_test pkg_preinst src_install pkg_postinst pkg_prerm pkg_postrm
 DESCRIPTION="Based on the ${ECLASS} eclass"
@@ -88,13 +89,13 @@
 	[[ -n ${PIE_VER} ]] && IUSE+=" nopie"
 	[[ -n ${HTB_VER} ]] && IUSE+=" boundschecking"
 	[[ -n ${D_VER}   ]] && IUSE+=" d"
-	[[ -n ${SPECS_VER} ]] && IUSE+=" nossp"
+	[[ -n ${PP_VER}${SPECS_VER} ]] && IUSE+=" nossp"
 
 	if tc_version_is_at_least 3 ; then
 		IUSE+=" bootstrap doc gcj gtk hardened libffi multilib objc"
 
 		tc_version_is_at_least "4.0" && IUSE+=" objc-gc mudflap"
-		tc_version_is_at_least "4.1" && IUSE+=" libssp objc++"
+		tc_version_is_at_least "4.1" && IUSE+=" objc++"
 		tc_version_is_at_least "4.2" && IUSE+=" openmp"
 		tc_version_is_at_least "4.3" && IUSE+=" fixed-point"
 		tc_version_is_at_least "4.4" && IUSE+=" graphite"
@@ -138,7 +139,7 @@
 	RDEPEND+="
 	    graphite? (
 	        >=dev-libs/cloog-ppl-0.15.10
-	        >=dev-libs/ppl-0.11
+	        >=dev-libs/ppl-0.10
 	    )"
 fi
 
@@ -170,17 +171,20 @@
 
 #---->> S + SRC_URI essentials <<----
 
-# Set the source directory depending on whether we're using
+# This function sets the source directory depending on whether we're using
 # a prerelease, snapshot, or release tarball.
-S=$(
+gcc_get_s_dir() {
+	local GCC_S
 	if [[ -n ${PRERELEASE} ]] ; then
-		echo ${WORKDIR}/gcc-${PRERELEASE}
+		GCC_S=${WORKDIR}/gcc-${PRERELEASE}
 	elif [[ -n ${SNAPSHOT} ]] ; then
-		echo ${WORKDIR}/gcc-${SNAPSHOT}
+		GCC_S=${WORKDIR}/gcc-${SNAPSHOT}
 	else
-		echo ${WORKDIR}/gcc-${GCC_RELEASE_VER}
+		GCC_S=${WORKDIR}/gcc-${GCC_RELEASE_VER}
 	fi
-)
+	echo "${GCC_S}"
+}
+S=$(gcc_get_s_dir)
 
 # This function handles the basics of setting the SRC_URI for a gcc ebuild.
 # To use, set SRC_URI with:
@@ -213,15 +217,18 @@
 #
 #	PIE_VER
 #	PIE_GCC_VER
+#	obsoleted: PIE_CORE
 #			These variables control patching in various updates for the logic
 #			controlling Position Independant Executables. PIE_VER is expected
-#			to be the version of this patch, and PIE_GCC_VER the gcc version of
-#			the patch:
+#			to be the version of this patch, PIE_GCC_VER the gcc version of
+#			the patch, and PIE_CORE (obsoleted) the actual filename of the patch.
 #			An example:
 #					PIE_VER="8.7.6.5"
 #					PIE_GCC_VER="3.4.0"
 #			The resulting filename of this tarball will be:
 #			gcc-${PIE_GCC_VER:-${GCC_RELEASE_VER}}-piepatches-v${PIE_VER}.tar.bz2
+#				old syntax (do not define PIE_CORE anymore):
+#					PIE_CORE="gcc-3.4.0-piepatches-v${PIE_VER}.tar.bz2"
 #
 #	SPECS_VER
 #	SPECS_GCC_VER
@@ -235,6 +242,23 @@
 #			The resulting filename of this tarball will be:
 #			gcc-${SPECS_GCC_VER:-${GCC_RELEASE_VER}}-specs-${SPECS_VER}.tar.bz2
 #
+#	PP_VER
+#	PP_GCC_VER
+#	obsoleted: PP_FVER
+#			These variables control patching in stack smashing protection
+#			support. They both control the version of ProPolice to download.
+#
+#		PP_VER / PP_GCC_VER
+#			Used to roll our own custom tarballs of ssp.
+#		PP_FVER / PP_VER
+#			Used for mirroring ssp straight from IBM.
+#			PP_VER sets the version of the directory in which to find the
+#			patch, and PP_FVER sets the version of the patch itself. For
+#			example:
+#					PP_VER="3_4"
+#					PP_FVER="${PP_VER//_/.}-2"
+#			would download gcc3_4/protector-3.4-2.tar.gz
+#
 #	HTB_VER
 #	HTB_GCC_VER
 #			These variables control whether or not an ebuild supports Herman
@@ -242,9 +266,17 @@
 #			for an older gcc version with a new gcc, make sure you set
 #			HTB_GCC_VER to that version of gcc.
 #
+#	MAN_VER
+#			The version of gcc for which we will download manpages. This will
+#			default to ${GCC_RELEASE_VER}, but we may not want to pre-generate man pages
+#			for prerelease test ebuilds for example. This allows you to
+#			continue using pre-generated manpages from the last stable release.
+#			If set to "none", this will prevent the downloading of manpages,
+#			which is useful for individual library targets.
+#
 gentoo_urls() {
-	local devspace="HTTP~vapier/dist/URI HTTP~dirtyepic/dist/URI
-	HTTP~halcy0n/patches/URI HTTP~zorry/patches/gcc/URI"
+	local devspace="HTTP~lv/GCC/URI HTTP~eradicator/gcc/URI HTTP~vapier/dist/URI
+	HTTP~halcy0n/patches/URI HTTP~zorry/patches/gcc/URI HTTP~dirtyepic/dist/URI"
 	devspace=${devspace//HTTP/http:\/\/dev.gentoo.org\/}
 	echo mirror://gentoo/$1 ${devspace//URI/$1}
 }
@@ -253,6 +284,7 @@
 	export PATCH_GCC_VER=${PATCH_GCC_VER:-${GCC_RELEASE_VER}}
 	export UCLIBC_GCC_VER=${UCLIBC_GCC_VER:-${PATCH_GCC_VER}}
 	export PIE_GCC_VER=${PIE_GCC_VER:-${GCC_RELEASE_VER}}
+	export PP_GCC_VER=${PP_GCC_VER:-${GCC_RELEASE_VER}}
 	export HTB_GCC_VER=${HTB_GCC_VER:-${GCC_RELEASE_VER}}
 	export SPECS_GCC_VER=${SPECS_GCC_VER:-${GCC_RELEASE_VER}}
 
@@ -266,39 +298,67 @@
 		GCC_SRC_URI="mirror://gnu/gcc/gcc-${GCC_PV}/gcc-${GCC_RELEASE_VER}.tar.bz2"
 		# we want all branch updates to be against the main release
 		[[ -n ${BRANCH_UPDATE} ]] && \
-			GCC_SRC_URI+=" $(gentoo_urls gcc-${GCC_RELEASE_VER}-branch-update-${BRANCH_UPDATE}.patch.bz2)"
+			GCC_SRC_URI="${GCC_SRC_URI} $(gentoo_urls gcc-${GCC_RELEASE_VER}-branch-update-${BRANCH_UPDATE}.patch.bz2)"
 	fi
 
-	[[ -n ${UCLIBC_VER} ]] && GCC_SRC_URI+=" $(gentoo_urls gcc-${UCLIBC_GCC_VER}-uclibc-patches-${UCLIBC_VER}.tar.bz2)"
-	[[ -n ${PATCH_VER} ]] && GCC_SRC_URI+=" $(gentoo_urls gcc-${PATCH_GCC_VER}-patches-${PATCH_VER}.tar.bz2)"
+	# propolice aka stack smashing protection
+	if [[ -n ${PP_VER} ]] ; then
+		if [[ -n ${PP_FVER} ]] ; then
+			GCC_SRC_URI="${GCC_SRC_URI}
+				!nossp? (
+					http://www.research.ibm.com/trl/projects/security/ssp/gcc${PP_VER}/protector-${PP_FVER}.tar.gz
+					$(gentoo_urls protector-${PP_FVER}.tar.gz)
+				)"
+		else
+			GCC_SRC_URI="${GCC_SRC_URI} $(gentoo_urls gcc-${PP_GCC_VER}-ssp-${PP_VER}.tar.bz2)"
+		fi
+	fi
+
+	# uclibc lovin
+	[[ -n ${UCLIBC_VER} ]] && \
+		GCC_SRC_URI="${GCC_SRC_URI} $(gentoo_urls gcc-${UCLIBC_GCC_VER}-uclibc-patches-${UCLIBC_VER}.tar.bz2)"
+
+	# PERL cannot be present at bootstrap, and is used to build the man pages.
+	# So... lets include some pre-generated ones, shall we?
+	[[ -n ${MAN_VER} ]] && \
+		GCC_SRC_URI="${GCC_SRC_URI} $(gentoo_urls gcc-${MAN_VER}-manpages.tar.bz2)"
+
+	# various gentoo patches
+	[[ -n ${PATCH_VER} ]] && \
+		GCC_SRC_URI="${GCC_SRC_URI} $(gentoo_urls gcc-${PATCH_GCC_VER}-patches-${PATCH_VER}.tar.bz2)"
 
 	# strawberry pie, Cappuccino and a Gauloises (it's a good thing)
 	[[ -n ${PIE_VER} ]] && \
 		PIE_CORE=${PIE_CORE:-gcc-${PIE_GCC_VER}-piepatches-v${PIE_VER}.tar.bz2} && \
-		GCC_SRC_URI+=" $(gentoo_urls ${PIE_CORE})"
+		GCC_SRC_URI="${GCC_SRC_URI} $(gentoo_urls ${PIE_CORE})"
 
 	# gcc minispec for the hardened gcc 4 compiler
-	[[ -n ${SPECS_VER} ]] && GCC_SRC_URI+=" $(gentoo_urls gcc-${SPECS_GCC_VER}-specs-${SPECS_VER}.tar.bz2)"
+	[[ -n ${SPECS_VER} ]] && \
+		GCC_SRC_URI="${GCC_SRC_URI} $(gentoo_urls gcc-${SPECS_GCC_VER}-specs-${SPECS_VER}.tar.bz2)"
 
 	# gcc bounds checking patch
 	if [[ -n ${HTB_VER} ]] ; then
 		local HTBFILE="bounds-checking-gcc-${HTB_GCC_VER}-${HTB_VER}.patch.bz2"
-		GCC_SRC_URI+="
+		GCC_SRC_URI="${GCC_SRC_URI}
 			boundschecking? (
 				mirror://sourceforge/boundschecking/${HTBFILE}
 				$(gentoo_urls ${HTBFILE})
 			)"
 	fi
 
-	[[ -n ${D_VER} ]] && GCC_SRC_URI+=" d? ( mirror://sourceforge/dgcc/gdc-${D_VER}-src.tar.bz2 )"
+	# support for the D language
+	[[ -n ${D_VER} ]] && \
+		GCC_SRC_URI="${GCC_SRC_URI} d? ( mirror://sourceforge/dgcc/gdc-${D_VER}-src.tar.bz2 )"
 
 	# >= gcc-4.3 uses ecj.jar and we only add gcj as a use flag under certain
 	# conditions
 	if [[ ${PN} != "kgcc64" && ${PN} != gcc-* ]] ; then
 		if tc_version_is_at_least "4.5" ; then
-			GCC_SRC_URI+=" gcj? ( ftp://sourceware.org/pub/java/ecj-4.5.jar )"
+			GCC_SRC_URI="${GCC_SRC_URI}
+			gcj? ( ftp://sourceware.org/pub/java/ecj-4.5.jar )"
 		elif tc_version_is_at_least "4.3" ; then
-			GCC_SRC_URI+=" gcj? ( ftp://sourceware.org/pub/java/ecj-4.3.jar )"
+			GCC_SRC_URI="${GCC_SRC_URI}
+			gcj? ( ftp://sourceware.org/pub/java/ecj-4.3.jar )"
 		fi
 	fi
 
@@ -331,14 +391,24 @@
 		[[ ${CTARGET} == *-freebsd* ]] && return 1
 
 		want_pie || return 1
-		use_if_iuse nopie && return 1
-		hardened_gcc_is_stable pie
-		return $?
+		tc_version_is_at_least 4.3.2 && use nopie && return 1
+		hardened_gcc_is_stable pie && return 0
+		if has "~$(tc-arch)" ${ACCEPT_KEYWORDS} ; then
+			hardened_gcc_check_unsupported pie && return 1
+			ewarn "Allowing pie-by-default for an unstable arch ($(tc-arch))"
+			return 0
+		fi
+		return 1
 	elif [[ $1 == "ssp" ]] ; then
-		[[ -n ${SPECS_VER} ]] || return 1
-		use_if_iuse nossp && return 1
-		hardened_gcc_is_stable ssp
-		return $?
+		[[ -n ${PP_VER} ]] || [[ -n ${SPECS_VER} ]] || return 1
+		tc_version_is_at_least 4.3.2 && use nossp && return 1
+		hardened_gcc_is_stable ssp && return 0
+		if has "~$(tc-arch)" ${ACCEPT_KEYWORDS} ; then
+			hardened_gcc_check_unsupported ssp && return 1
+			ewarn "Allowing ssp-by-default for an unstable arch ($(tc-arch))"
+			return 0
+		fi
+		return 1
 	else
 		# laziness ;)
 		hardened_gcc_works pie || return 1
@@ -348,18 +418,21 @@
 }
 
 hardened_gcc_is_stable() {
-	local tocheck
 	if [[ $1 == "pie" ]] ; then
+		# HARDENED_* variables are deprecated and here for compatibility
+		local tocheck="${HARDENED_PIE_WORKS} ${HARDENED_GCC_WORKS}"
 		if [[ ${CTARGET} == *-uclibc* ]] ; then
-			tocheck=${PIE_UCLIBC_STABLE}
+			tocheck="${tocheck} ${PIE_UCLIBC_STABLE}"
 		else
-			tocheck=${PIE_GLIBC_STABLE}
+			tocheck="${tocheck} ${PIE_GLIBC_STABLE}"
 		fi
 	elif [[ $1 == "ssp" ]] ; then
+		# ditto
+		local tocheck="${HARDENED_SSP_WORKS} ${HARDENED_GCC_WORKS}"
 		if [[ ${CTARGET} == *-uclibc* ]] ; then
-			tocheck=${SSP_UCLIBC_STABLE}
+			tocheck="${tocheck} ${SSP_UCLIBC_STABLE}"
 		else
-			tocheck=${SSP_STABLE}
+			tocheck="${tocheck} ${SSP_STABLE}"
 		fi
 	else
 		die "hardened_gcc_stable needs to be called with pie or ssp"
@@ -369,14 +442,71 @@
 	return 1
 }
 
+hardened_gcc_check_unsupported() {
+	local tocheck=""
+	# if a variable is unset, we assume that all archs are unsupported. since
+	# this function is never called if hardened_gcc_is_stable returns true,
+	# this shouldn't cause problems... however, allowing this logic to work
+	# even with the variables unset will break older ebuilds that dont use them.
+	if [[ $1 == "pie" ]] ; then
+		if [[ ${CTARGET} == *-uclibc* ]] ; then
+			[[ -z ${PIE_UCLIBC_UNSUPPORTED} ]] && return 0
+			tocheck="${tocheck} ${PIE_UCLIBC_UNSUPPORTED}"
+		else
+			[[ -z ${PIE_GLIBC_UNSUPPORTED} ]] && return 0
+			tocheck="${tocheck} ${PIE_GLIBC_UNSUPPORTED}"
+		fi
+	elif [[ $1 == "ssp" ]] ; then
+		if [[ ${CTARGET} == *-uclibc* ]] ; then
+			[[ -z ${SSP_UCLIBC_UNSUPPORTED} ]] && return 0
+			tocheck="${tocheck} ${SSP_UCLIBC_UNSUPPORTED}"
+		else
+			[[ -z ${SSP_UNSUPPORTED} ]] && return 0
+			tocheck="${tocheck} ${SSP_UNSUPPORTED}"
+		fi
+	else
+		die "hardened_gcc_check_unsupported needs to be called with pie or ssp"
+	fi
+
+	has $(tc-arch) ${tocheck} && return 0
+	return 1
+}
+
+has_libssp() {
+	[[ -e /$(get_libdir)/libssp.so ]] && return 0
+	return 1
+}
+
+want_libssp() {
+	# Not sure what this function is supposed to do, but since GCC always has
+	# libssp from 4.1, we need libssp as soon as our libc doesn't have it (like
+	# Solaris) I hope this doesn't break linux, but it shouldn't.  Since the
+	# code forces configure to think ssp is in libc when this function returns
+	# false, we need to ensure that is correct.
+	if tc_version_is_at_least 4.1 ; then
+		libc_has_ssp && return 1
+		return 0
+	fi
+	[[ ${GCC_LIBSSP_SUPPORT} == "true" ]] || return 1
+	has_libssp || return 1
+	[[ -n ${PP_VER} ]] || return 1
+	return 0
+}
+
+_want_stuff() {
+	local var=$1 flag=$2
+	[[ -z ${!var} ]] && return 1
+	use ${flag} && return 0
+	return 1
+}
+want_boundschecking() { _want_stuff HTB_VER boundschecking ; }
 want_pie() {
 	! use hardened && [[ -n ${PIE_VER} ]] && use nopie && return 1
 	[[ -n ${PIE_VER} ]] && [[ -n ${SPECS_VER} ]] && return 0
 	tc_version_is_at_least 4.3.2 && return 1
-	[[ -z ${PIE_VER} ]] && return 1
-	use !nopie && return 0
-	return 1
+	_want_stuff PIE_VER !nopie
 }
+want_ssp() { _want_stuff PP_VER !nossp ; }
 
 want_minispecs() {
 	if tc_version_is_at_least 4.3.2 && use hardened ; then
@@ -386,7 +516,7 @@
 			ewarn "You will not get hardened features if you have the vanilla USE-flag."
 		elif use nopie && use nossp ; then
 			ewarn "You will not get hardened features if you have the nopie and nossp USE-flag."
-		elif ! hardened_gcc_works ; then
+		elif ! hardened_gcc_works pie && ! hardened_gcc_works ssp && ! use nopie ; then
 			ewarn "Your $(tc-arch) arch is not supported."
 		else
 			return 0
@@ -396,6 +526,73 @@
 	fi
 	return 1
 }
+# This function checks whether or not glibc has the support required to build
+# Position Independant Executables with gcc.
+glibc_have_pie() {
+	if [[ ! -f ${EROOT}/usr/$(get_libdir)/Scrt1.o ]] ; then
+		echo
+		ewarn "Your glibc does not have support for pie, the file Scrt1.o is missing"
+		ewarn "Please update your glibc to a proper version or disable hardened"
+		echo
+		return 1
+	fi
+}
+
+# This function determines whether or not libc has been patched with stack
+# smashing protection support.
+libc_has_ssp() {
+	[[ ${ROOT} != "/" ]] && return 0
+
+	case ${CHOST} in
+		*-darwin*)
+			nm /usr/lib/libSystem.dylib | grep stack_chk_guard && return 0
+			return 1
+		;;
+		*-linux-gnu|*-solaris*)
+			# test below
+			:
+		;;
+		*)
+			# something odd, assume it downright hasn't,
+			#like e.g. AIX, bug #378905, comment #18
+			return 1
+		;;
+	esac
+
+	# lib hacks taken from sandbox configure
+	echo 'int main(){}' > "${T}"/libctest.c
+	LC_ALL=C gcc "${T}"/libctest.c -lc -o libctest -Wl,-verbose &> "${T}"/libctest.log || return 1
+	local libc_file=$(awk '/attempt to open/ { if (($4 ~ /\/libc\.so/) && ($5 == "succeeded")) LIBC = $4; }; END {print LIBC}' "${T}"/libctest.log)
+
+	if [[ -z ${libc_file} ]] ; then
+		# not sure why this can't be used by default, but let's keep on using
+		# it as a fallback for e.g. Solaris with Sun ld, see bug #378905
+		libc_file=$(gcc -print-file-name=libc.so)
+		[[ ${libc_file} == "libc.so" ]] && libc_file=
+	fi
+
+	[[ -z ${libc_file} ]] && die "Unable to find a libc !?"
+
+	# Check for gcc-4.x style ssp support
+	if	[[ -n $(readelf -s "${libc_file}" 2>/dev/null | \
+				grep 'FUNC.*GLOBAL.*__stack_chk_fail') ]]
+	then
+		return 0
+	else
+		# Check for gcc-3.x style ssp support
+		if	[[ -n $(readelf -s "${libc_file}" 2>/dev/null | \
+					grep 'OBJECT.*GLOBAL.*__guard') ]] && \
+			[[ -n $(readelf -s "${libc_file}" 2>/dev/null | \
+					grep 'FUNC.*GLOBAL.*__stack_smash_handler') ]]
+		then
+			return 0
+		elif is_crosscompile ; then
+			die "'${libc_file}' was detected w/out ssp, that sucks (a lot)"
+		else
+			return 1
+		fi
+	fi
+}
 
 # This is to make sure we don't accidentally try to enable support for a
 # language that doesnt exist. GCC 3.4 supports f77, while 4.0 supports f95, etc.
@@ -412,22 +609,25 @@
 
 #---->> specs + env.d logic <<----
 
-# configure to build with the hardened GCC specs as the default
-make_gcc_hard() {
 	# defaults to enable for all hardened toolchains
-	local gcc_hard_flags="-DEFAULT_RELRO -DEFAULT_BIND_NOW"
+gcc_common_hard="-DEFAULT_RELRO -DEFAULT_BIND_NOW"
 
+# configure to build with the hardened GCC specs as the default
+make_gcc_hard() {
 	if hardened_gcc_works ; then
 		einfo "Updating gcc to use automatic PIE + SSP building ..."
-		gcc_hard_flags+=" -DEFAULT_PIE_SSP"
+		sed -e "s|^HARD_CFLAGS = |HARD_CFLAGS = -DEFAULT_PIE_SSP ${gcc_common_hard} |" \
+			-i "${S}"/gcc/Makefile.in || die "Failed to update gcc!"
 	elif hardened_gcc_works pie ; then
 		einfo "Updating gcc to use automatic PIE building ..."
 		ewarn "SSP has not been enabled by default"
-		gcc_hard_flags+=" -DEFAULT_PIE"
+		sed -e "s|^HARD_CFLAGS = |HARD_CFLAGS = -DEFAULT_PIE ${gcc_common_hard} |" \
+			-i "${S}"/gcc/Makefile.in || die "Failed to update gcc!"
 	elif hardened_gcc_works ssp ; then
 		einfo "Updating gcc to use automatic SSP building ..."
 		ewarn "PIE has not been enabled by default"
-		gcc_hard_flags+=" -DEFAULT_SSP"
+		sed -e "s|^HARD_CFLAGS = |HARD_CFLAGS = -DEFAULT_SSP ${gcc_common_hard} |" \
+			-i "${S}"/gcc/Makefile.in || die "Failed to update gcc!"
 	else
 		# do nothing if hardened isnt supported, but dont die either
 		ewarn "hardened is not supported for this arch in this gcc version"
@@ -435,10 +635,6 @@
 		return 0
 	fi
 
-	sed -i \
-		-e "/^HARD_CFLAGS = /s|=|= ${gcc_hard_flags} |" \
-		"${S}"/gcc/Makefile.in || die
-
 	# rebrand to make bug reports easier
 	BRANDING_GCC_PKGVERSION=${BRANDING_GCC_PKGVERSION/Gentoo/Gentoo Hardened}
 }
@@ -464,6 +660,15 @@
 	echo "ROOTPATH=\"${EPREFIX}${BINPATH}\"" >> ${gcc_envd_file}
 	echo "GCC_PATH=\"${EPREFIX}${BINPATH}\"" >> ${gcc_envd_file}
 
+	if is_multilib ; then
+		LDPATH="${EPREFIX}${LIBPATH}"
+		for path in 32 64 ; do
+			[[ -d ${ED}${LIBPATH}/${path} ]] && LDPATH="${LDPATH}:${EPREFIX}${LIBPATH}/${path}"
+		done
+	else
+		local MULTIDIR
+		LDPATH="${EPREFIX}${LIBPATH}"
+
 	# We want to list the default ABI's LIBPATH first so libtool
 	# searches that directory first.  This is a temporary
 	# workaround for libtool being stupid and using .la's from
@@ -468,17 +673,26 @@
 	# searches that directory first.  This is a temporary
 	# workaround for libtool being stupid and using .la's from
 	# conflicting ABIs by using the first one in the search path
+
 	local abi=${DEFAULT_ABI}
 	local MULTIDIR=$($(XGCC) $(get_abi_CFLAGS ${abi}) --print-multi-directory)
-	local LDPATH=${EPREFIX}${LIBPATH}
-	[[ ${MULTIDIR} != "." ]] && LDPATH+=/${MULTIDIR}
+		if [[ ${MULTIDIR} == "." ]] ; then
+			LDPATH="${EPREFIX}${LIBPATH}"
+		else
+			LDPATH="${EPREFIX}${LIBPATH}/${MULTIDIR}"
+		fi
+
 	for abi in $(get_all_abis) ; do
 		[[ ${abi} == ${DEFAULT_ABI} ]] && continue
 
 		MULTIDIR=$($(XGCC) $(get_abi_CFLAGS ${abi}) --print-multi-directory)
-		LDPATH+=:${EPREFIX}${LIBPATH}
-		[[ ${MULTIDIR} != "." ]] && LDPATH+=/${MULTIDIR}
+			if [[ ${MULTIDIR} == "." ]] ; then
+				LDPATH=${LDPATH}:${EPREFIX}${LIBPATH}
+			else
+				LDPATH=${LDPATH}:${EPREFIX}${LIBPATH}/${MULTIDIR}
+			fi
 	done
+	fi
 
 	echo "LDPATH=\"${LDPATH}\"" >> ${gcc_envd_file}
 	echo "MANPATH=\"${EPREFIX}${DATAPATH}/man\"" >> ${gcc_envd_file}
@@ -565,6 +779,8 @@
 		use_if_iuse gcj && ewarn 'GCJ requires a C++ compiler, disabled due to USE="-cxx"'
 	fi
 
+	want_libssp && libc_has_ssp && \
+		die "libssp cannot be used with a glibc that has been patched to provide ssp symbols"
 	want_minispecs
 
 	unset LANGUAGES #265283
@@ -715,6 +931,7 @@
 	[[ -z ${UCLIBC_VER} ]] && [[ ${CTARGET} == *-uclibc* ]] && die "Sorry, this version does not support uClibc"
 
 	[[ -z ${GCC_SVN} ]] && gcc_quick_unpack
+	exclude_gcc_patches
 
 	cd "${S}"
 
@@ -732,10 +949,18 @@
 		fi
 	fi
 	do_gcc_HTB_patches
+	do_gcc_SSP_patches
 	do_gcc_PIE_patches
 	epatch_user
 
-	use hardened && make_gcc_hard
+	# fail if using pie patches, building hardened, and glibc doesnt have
+	# the necessary support
+	want_pie && use hardened && glibc_have_pie
+
+	if use hardened ; then
+		einfo "updating configuration to build hardened GCC"
+		make_gcc_hard || die "failed to make gcc hard"
+	fi
 
 	if is_libffi ; then
 		# move the libffi target out of gcj and into all
@@ -838,21 +1063,6 @@
 	disable_multilib_libjava || die "failed to disable multilib java"
 }
 
-gcc-abi-map() {
-	# Convert the ABI name we use in Gentoo to what gcc uses
-	local map=()
-	case ${CTARGET} in
-	mips*)   map=("o32 32" "n32 n32" "n64 64") ;;
-	x86_64*) map=("amd64 m64" "x86 m32" "x32 mx32") ;;
-	esac
-
-	local m
-	for m in "${map[@]}" ; do
-		l=( ${m} )
-		[[ $1 == ${l[0]} ]] && echo ${l[1]} && break
-	done
-}
-
 gcc-multilib-configure() {
 	# if multilib is disabled, get out quick!
 	if ! is_multilib ; then
@@ -863,23 +1073,19 @@
 	fi
 
 	# translate our notion of multilibs into gcc's
-	local abi list
-	for abi in $(get_all_abis) ; do
-		local l=$(gcc-abi-map ${abi})
-		[[ -n ${l} ]] && list+=",${l}"
-	done
-	if [[ -n ${list} ]] ; then
+	local abi map=() list
 		case ${CTARGET} in
-		x86_64*)
-			# drop the 4.6.2 stuff once 4.7 goes stable
-			if tc_version_is_at_least 4.7 ||
-			   ( tc_version_is_at_least 4.6.2 && has x32 $(get_all_abis) )
-			then
-				confgcc+=" --with-multilib-list=${list:1}"
-			fi
-			;;
+	x86_64*) tc_version_is_at_least 4.7 && map=(amd64:m64 x86:m32 x32:mx32) ;;
 		esac
-	fi
+	for abi in $(get_all_abis) ; do
+		local m a l
+		for m in "${map[@]}" ; do
+			a=${m%:*}
+			l=${m#*:}
+			[[ ${abi} == ${a} ]] && list=",${l}${list}"
+		done
+	done
+	[[ -n ${list} ]] && confgcc+=" --with-multilib-list=${list:1}"
 }
 
 gcc-compiler-configure() {
@@ -892,12 +1098,10 @@
 			confgcc+=" --disable-libmudflap"
 		fi
 
-		if use_if_iuse libssp ; then
+		if want_libssp ; then
 			confgcc+=" --enable-libssp"
 		else
-			# Not all libc's have ssp built in.  I assume only glibc has for
-			# now.
-			elibc_glibc? && export gcc_cv_libc_provides_ssp=yes
+			export gcc_cv_libc_provides_ssp=yes
 			confgcc+=" --disable-libssp"
 		fi
 
@@ -970,7 +1174,6 @@
 		confgcc+=" --disable-libquadmath"
 	fi
 
-	local with_abi_map=()
 	case $(tc-arch) in
 		arm)	#264534
 			local arm_arch="${CTARGET%%-*}"
@@ -990,16 +1193,12 @@
 			        confgcc+=" --with-float=hard"
 			fi
 			;;
-		# Add --with-abi flags to set default ABI
+		# Add --with-abi flags to set default MIPS ABI
 		mips)
-			confgcc+=" --with-abi=$(gcc-abi-map ${DEFAULT_ABI})"
-			;;
-		amd64)
-			# drop the older/ABI checks once this get's merged into some
-			# version of gcc upstream
-			if [[ ${PV} == "4.6.2" ]] && has x32 $(get_all_abis) ; then
-				confgcc+=" --with-abi=$(gcc-abi-map ${DEFAULT_ABI})"
-			fi
+			local mips_abi=""
+			[[ ${DEFAULT_ABI} == n64 ]] && mips_abi="--with-abi=64"
+			[[ ${DEFAULT_ABI} == n32 ]] && mips_abi="--with-abi=n32"
+			[[ -n ${mips_abi} ]] && confgcc+=" ${mips_abi}"
 			;;
 		# Default arch for x86 is normally i386, lets give it a bump
 		# since glibc will do so based on CTARGET anyways
@@ -1017,34 +1216,45 @@
 			;;
 	esac
 
-	local GCC_LANG="c"
-	is_cxx && GCC_LANG+=",c++"
-	is_d   && GCC_LANG+=",d"
-	is_gcj && GCC_LANG+=",java"
-	is_go  && GCC_LANG+=",go"
+	GCC_LANG="c"
+	is_cxx && GCC_LANG="${GCC_LANG},c++"
+	is_d   && GCC_LANG="${GCC_LANG},d"
+	is_gcj && GCC_LANG="${GCC_LANG},java"
+	is_go  && GCC_LANG="${GCC_LANG},go"
 	if is_objc || is_objcxx ; then
-		GCC_LANG+=",objc"
+		GCC_LANG="${GCC_LANG},objc"
 		if tc_version_is_at_least "4.0" ; then
 			use objc-gc && confgcc+=" --enable-objc-gc"
 		fi
-		is_objcxx && GCC_LANG+=",obj-c++"
+		is_objcxx && GCC_LANG="${GCC_LANG},obj-c++"
 	fi
-	is_treelang && GCC_LANG+=",treelang"
+	is_treelang && GCC_LANG="${GCC_LANG},treelang"
 
 	# fortran support just got sillier! the lang value can be f77 for
 	# fortran77, f95 for fortran95, or just plain old fortran for the
 	# currently supported standard depending on gcc version.
-	is_fortran && GCC_LANG+=",fortran"
-	is_f77 && GCC_LANG+=",f77"
-	is_f95 && GCC_LANG+=",f95"
+	is_fortran && GCC_LANG="${GCC_LANG},fortran"
+	is_f77 && GCC_LANG="${GCC_LANG},f77"
+	is_f95 && GCC_LANG="${GCC_LANG},f95"
 
 	# We do NOT want 'ADA support' in here!
-	# is_ada && GCC_LANG+=",ada"
+	# is_ada && GCC_LANG="${GCC_LANG},ada"
 
 	einfo "configuring for GCC_LANG: ${GCC_LANG}"
-	confgcc+=" --enable-languages=${GCC_LANG}"
 }
 
+# Other than the variables described for gcc_setup_variables, the following
+# will alter tha behavior of gcc_do_configure:
+#
+#	CTARGET
+#	CBUILD
+#			Enable building for a target that differs from CHOST
+#
+#	GCC_LANG
+#			Enable support for ${GCC_LANG} languages. defaults to just "c"
+#
+# Travis Tilley <lv@gentoo.org> (04 Sep 2004)
+#
 gcc_do_configure() {
 	local confgcc
 
@@ -1108,7 +1319,12 @@
 		confgcc+=" $(use_with graphite cloog)"
 		if use graphite; then
 			confgcc+=" --disable-ppl-version-check"
+			# this will be removed when cloog-ppl-0.15.10 goes stable
+			if has_version '>=dev-libs/cloog-ppl-0.15.10'; then
 			confgcc+=" --with-cloog-include=${EPREFIX}/usr/include/cloog-ppl"
+			else
+				confgcc+=" --with-cloog-include=${EPREFIX}/usr/include/cloog"
+			fi
 		fi
 	fi
 
@@ -1139,6 +1355,11 @@
 
 	gcc-compiler-configure || die
 
+	# if not specified, assume we are building for a target that only
+	# requires C support
+	GCC_LANG=${GCC_LANG:-c}
+	confgcc+=" --enable-languages=${GCC_LANG}"
+
 	if is_crosscompile ; then
 		# When building a stage1 cross-compiler (just C compiler), we have to
 		# disable a bunch of features or gcc goes boom
@@ -1176,6 +1397,7 @@
 			confgcc+=" --enable-shared"
 		fi
 		case ${CHOST} in
+			# DONT FIXME *-cygwin is correct!!! on *-cygwin1.7 we want posix threads.
 			mingw*|*-mingw*|*-cygwin)
 				confgcc+=" --enable-threads=win32" ;;
 			*)
@@ -1217,14 +1439,14 @@
 	esac
 	tc_version_is_at_least 3.4 || confgcc+=" --disable-libunwind-exceptions"
 
-	# if the target can do biarch (-m32/-m64), enable it.  overhead should
-	# be small, and should simplify building of 64bit kernels in a 32bit
-	# userland by not needing sys-devel/kgcc64.  #349405
-	case $(tc-arch) in
-	ppc|ppc64) tc_version_is_at_least 3.4 && confgcc+=" --enable-targets=all" ;;
-	sparc)     tc_version_is_at_least 4.4 && confgcc+=" --enable-targets=all" ;;
-	amd64|x86) tc_version_is_at_least 4.3 && confgcc+=" --enable-targets=all" ;;
-	esac
+	# create a sparc*linux*-{gcc,g++} that can handle -m32 and -m64 (biarch)
+	if [[ ${CTARGET} == sparc*linux* ]] \
+		&& is_multilib \
+		&& ! is_crosscompile \
+		&& tc_version_is_at_least 4.3
+	then
+		confgcc+=" --enable-targets=all"
+	fi
 
 	tc_version_is_at_least 4.3 && set -- "$@" \
 		--with-bugurl=http://bugs.gentoo.org/ \
@@ -1256,16 +1478,6 @@
 	popd > /dev/null
 }
 
-has toolchain_death_notice ${EBUILD_DEATH_HOOKS} || EBUILD_DEATH_HOOKS+=" toolchain_death_notice"
-toolchain_death_notice() {
-	pushd "${WORKDIR}"/build >/dev/null
-	tar jcf gcc-build-logs.tar.bz2 $(find -name config.log)
-	eerror
-	eerror "Please include ${PWD}/gcc-build-logs.tar.bz2 in your bug report"
-	eerror
-	popd >/dev/null
-}
-
 # This function accepts one optional argument, the make target to be used.
 # If ommitted, gcc_do_make will try to guess whether it should use all,
 # profiledbootstrap, or bootstrap-lean depending on CTARGET and arch. An
@@ -1305,12 +1517,10 @@
 
 	# the gcc docs state that parallel make isnt supported for the
 	# profiledbootstrap target, as collisions in profile collecting may occur.
-	# boundschecking also seems to introduce parallel build issues.
-	if [[ ${GCC_MAKE_TARGET} == "profiledbootstrap" ]] ||
-	   use_if_iuse boundschecking
-	then
-		export MAKEOPTS="${MAKEOPTS} -j1"
-	fi
+	[[ ${GCC_MAKE_TARGET} == "profiledbootstrap" ]] && export MAKEOPTS="${MAKEOPTS} -j1"
+
+	# boundschecking seems to introduce parallel build issues
+	want_boundschecking && export MAKEOPTS="${MAKEOPTS} -j1"
 
 	if [[ ${GCC_MAKE_TARGET} == "all" ]] ; then
 		STAGE1_CFLAGS=${STAGE1_CFLAGS-"${CFLAGS}"}
@@ -1441,7 +1651,6 @@
 }
 
 toolchain_src_compile() {
-	multilib_env ${CTARGET}
 	gcc_do_filter_flags
 	einfo "CFLAGS=\"${CFLAGS}\""
 	einfo "CXXFLAGS=\"${CXXFLAGS}\""
@@ -1459,6 +1668,10 @@
 	mkdir -p "${WORKDIR}"/build
 	pushd "${WORKDIR}"/build > /dev/null
 
+	# Install our pre generated manpages if we do not have perl ...
+	[[ ! -x ${EPREFIX}/usr/bin/perl ]] && [[ -n ${MAN_VER} ]] && \
+		unpack gcc-${MAN_VER}-manpages.tar.bz2
+
 	einfo "Configuring ${PN} ..."
 	gcc_do_configure
 
@@ -1534,6 +1747,10 @@
 
 	gcc_slot_java
 
+	# Move <cxxabi.h> to compiler-specific directories
+	[[ -f ${ED}${STDCXX_INCDIR}/cxxabi.h ]] && \
+		mv -f "${ED}"${STDCXX_INCDIR}/cxxabi.h "${ED}"${LIBPATH}/include/
+
 	# These should be symlinks
 	dodir /usr/bin
 	cd "${ED}"${BINPATH}
@@ -1542,7 +1759,7 @@
 		# this should take care of that
 		[[ -f ${x} ]] && mv ${x} ${CTARGET}-${x}
 
-		if [[ -f ${CTARGET}-${x} ]] ; then
+		if [[ -f ${CTARGET}-${x} ]] && ! is_crosscompile ; then
 			ln -sf ${CTARGET}-${x} ${x}
 
 			# Create version-ed symlinks
@@ -1595,7 +1812,9 @@
 			|| prepman "${DATAPATH}"
 	fi
 	# prune empty dirs left behind
-	find "${ED}" -depth -type d -delete 2>/dev/null
+	for x in 1 2 3 4 ; do
+		find "${ED}" -type d -exec rmdir "{}" \; >& /dev/null
+	done
 
 	# install testsuite results
 	if use test; then
@@ -1628,10 +1847,9 @@
 		doexe "${GCC_FILESDIR}"/c{89,99} || die
 	fi
 
-	# Use gid of 0 because some stupid ports don't have
-	# the group 'root' set to gid 0.  Send to /dev/null
-	# for people who are testing as non-root.
-	chown -R ${PORTAGE_INST_UID:-0}:${PORTAGE_INST_GID:-0} "${ED}"${LIBPATH} 2>/dev/null
+	# use gid of 0 because some stupid ports don't have
+	# the group 'root' set to gid 0
+	chown -R ${PORTAGE_INST_UID:-0}:${PORTAGE_INST_GID:-0} "${ED}"${LIBPATH}
 
 	# Move pretty-printers to gdb datadir to shut ldconfig up
 	local py gdbdir=/usr/share/gdb/auto-load${LIBPATH/\/lib\//\/$(get_libdir)\/}
@@ -1648,12 +1866,6 @@
 	# Don't scan .gox files for executable stacks - false positives
 	export QA_EXECSTACK="usr/lib*/go/*/*.gox"
 	export QA_WX_LOAD="usr/lib*/go/*/*.gox"
-
-	# Disable RANDMMAP so PCH works. #301299
-	if tc_version_is_at_least 4.3 ; then
-		pax-mark -r "${ED}${PREFIX}/libexec/gcc/${CTARGET}/${GCC_CONFIG_VER}/cc1"
-		pax-mark -r "${ED}${PREFIX}/libexec/gcc/${CTARGET}/${GCC_CONFIG_VER}/cc1plus"
-	fi
 }
 
 gcc_slot_java() {
@@ -1677,18 +1889,16 @@
 		rm -rf "${ED}"${PREFIX}/lib*/security
 	fi
 
-	# Move random gcj files to compiler-specific directories
-	for x in libgcj.spec logging.properties ; do
-		x="${ED}${PREFIX}/lib/${x}"
-		[[ -f ${x} ]] && mv -f "${x}" "${ED}"${LIBPATH}/
-	done
-
-	# SLOT up libgcj.pc if it's available (and let gcc-config worry about links)
-	for x in "${ED}"${PREFIX}/lib*/pkgconfig/libgcj*.pc ; do
-		[[ -f ${x} ]] || continue
-		sed -i "/^libdir=/s:=.*:=${LIBPATH}:" "${x}"
-		mv "${x}" "${ED}"/usr/lib/pkgconfig/libgcj-${GCC_PV}.pc || die
-	done
+	# Move libgcj.spec to compiler-specific directories
+	[[ -f ${ED}${PREFIX}/lib/libgcj.spec ]] && \
+		mv -f "${ED}"${PREFIX}/lib/libgcj.spec "${ED}"${LIBPATH}/libgcj.spec
+
+	# SLOT up libgcj.pc (and let gcc-config worry about links)
+	local libgcj=$(find "${ED}"${PREFIX}/lib/pkgconfig/ -name 'libgcj*.pc')
+	if [[ -n ${libgcj} ]] ; then
+		sed -i "/^libdir=/s:=.*:=${EPREFIX}${LIBPATH}:" "${libgcj}"
+		mv "${libgcj}" "${ED}"/usr/lib/pkgconfig/libgcj-${GCC_PV}.pc || die
+	fi
 
 	# Rename jar because it could clash with Kaffe's jar if this gcc is
 	# primary compiler (aka don't have the -<version> extension)
@@ -1758,6 +1968,7 @@
 	export PATCH_GCC_VER=${PATCH_GCC_VER:-${GCC_RELEASE_VER}}
 	export UCLIBC_GCC_VER=${UCLIBC_GCC_VER:-${PATCH_GCC_VER}}
 	export PIE_GCC_VER=${PIE_GCC_VER:-${GCC_RELEASE_VER}}
+	export PP_GCC_VER=${PP_GCC_VER:-${GCC_RELEASE_VER}}
 	export HTB_GCC_VER=${HTB_GCC_VER:-${GCC_RELEASE_VER}}
 	export SPECS_GCC_VER=${SPECS_GCC_VER:-${GCC_RELEASE_VER}}
 
@@ -1798,6 +2009,17 @@
 	[[ -n ${UCLIBC_VER} ]] && \
 		unpack gcc-${UCLIBC_GCC_VER}-uclibc-patches-${UCLIBC_VER}.tar.bz2
 
+	if want_ssp ; then
+		if [[ -n ${PP_FVER} ]] ; then
+			# The gcc 3.4 propolice versions are meant to be unpacked to ${S}
+			pushd "${S}" > /dev/null
+			unpack protector-${PP_FVER}.tar.gz
+			popd > /dev/null
+		else
+			unpack gcc-${PP_GCC_VER}-ssp-${PP_VER}.tar.bz2
+		fi
+	fi
+
 	if want_pie ; then
 		if [[ -n ${PIE_CORE} ]] ; then
 			unpack ${PIE_CORE}
@@ -1808,22 +2030,152 @@
 			unpack gcc-${SPECS_GCC_VER}-specs-${SPECS_VER}.tar.bz2
 	fi
 
-	use_if_iuse boundschecking && unpack "bounds-checking-gcc-${HTB_GCC_VER}-${HTB_VER}.patch.bz2"
+	want_boundschecking && \
+		unpack "bounds-checking-gcc-${HTB_GCC_VER}-${HTB_VER}.patch.bz2"
 
 	popd > /dev/null
 }
 
+# Exclude any unwanted patches, as specified by the following variables:
+#
+#	GENTOO_PATCH_EXCLUDE
+#			List of filenames, relative to ${WORKDIR}/patch/
+exclude_gcc_patches() {
+	local i
+	for i in ${GENTOO_PATCH_EXCLUDE} ; do
+		if [[ -f ${WORKDIR}/patch/${i} ]] ; then
+			einfo "Excluding patch ${i}"
+			rm -f "${WORKDIR}"/patch/${i} || die "failed to delete ${i}"
+		fi
+	done
+}
+
+# Try to apply some stub patches so that gcc won't error out when
+# passed parameters like -fstack-protector but no ssp is found
+do_gcc_stub() {
+	local v stub_patch=""
+	for v in ${GCC_RELEASE_VER} ${GCC_BRANCH_VER} ; do
+		stub_patch=${GCC_FILESDIR}/stubs/gcc-${v}-$1-stub.patch
+		if [[ -e ${stub_patch} ]] && ! use vanilla ; then
+			EPATCH_SINGLE_MSG="Applying stub patch for $1 ..." \
+			epatch "${stub_patch}"
+			return 0
+		fi
+	done
+}
+
 do_gcc_HTB_patches() {
-	use_if_iuse boundschecking || return 0
+	if ! want_boundschecking || \
+	   (want_ssp && [[ ${HTB_EXCLUSIVE} == "true" ]])
+	then
+		do_gcc_stub htb
+		return 0
+	fi
 
 	# modify the bounds checking patch with a regression patch
 	epatch "${WORKDIR}/bounds-checking-gcc-${HTB_GCC_VER}-${HTB_VER}.patch"
 	BRANDING_GCC_PKGVERSION="${BRANDING_GCC_PKGVERSION}, HTB-${HTB_GCC_VER}-${HTB_VER}"
 }
 
+# patch in ProPolice Stack Smashing protection
+do_gcc_SSP_patches() {
+	# PARISC has no love ... it's our stack :(
+	if [[ $(tc-arch) == "hppa" ]] || \
+	   ! want_ssp || \
+	   (want_boundschecking && [[ ${HTB_EXCLUSIVE} == "true" ]])
+	then
+		do_gcc_stub ssp
+		return 0
+	fi
+
+	local ssppatch
+	local sspdocs
+
+	if [[ -n ${PP_FVER} ]] ; then
+		# Etoh keeps changing where files are and what the patch is named
+		if tc_version_is_at_least 3.4.1 ; then
+			# >3.4.1 uses version in patch name, and also includes docs
+			ssppatch="${S}/gcc_${PP_VER}.dif"
+			sspdocs="yes"
+		elif tc_version_is_at_least 3.4.0 ; then
+			# >3.4 put files where they belong and 3_4 uses old patch name
+			ssppatch="${S}/protector.dif"
+			sspdocs="no"
+		elif tc_version_is_at_least 3.2.3 ; then
+			# earlier versions have no directory structure or docs
+			mv "${S}"/protector.{c,h} "${S}"/gcc
+			ssppatch="${S}/protector.dif"
+			sspdocs="no"
+		fi
+	else
+		# Just start packaging the damn thing ourselves
+		mv "${WORKDIR}"/ssp/protector.{c,h} "${S}"/gcc/
+		ssppatch=${WORKDIR}/ssp/gcc-${PP_GCC_VER}-ssp.patch
+		# allow boundschecking and ssp to get along
+		(want_boundschecking && [[ -e ${WORKDIR}/ssp/htb-ssp.patch ]]) \
+			&& patch -s "${ssppatch}" "${WORKDIR}"/ssp/htb-ssp.patch
+	fi
+
+	[[ -z ${ssppatch} ]] && die "Sorry, SSP is not supported in this version"
+	epatch ${ssppatch}
+
+	if [[ ${PN} == "gcc" && ${sspdocs} == "no" ]] ; then
+		epatch "${GCC_FILESDIR}"/pro-police-docs.patch
+	fi
+
+	# Don't build crtbegin/end with ssp
+	sed -e 's|^CRTSTUFF_CFLAGS = |CRTSTUFF_CFLAGS = -fno-stack-protector |'\
+		-i gcc/Makefile.in || die "Failed to update crtstuff!"
+
+	# if gcc in a stage3 defaults to ssp, is version 3.4.0 and a stage1 is built
+	# the build fails building timevar.o w/:
+	# cc1: stack smashing attack in function ix86_split_to_parts()
+	if use build && tc_version_is_at_least 3.4.0 ; then
+		if gcc -dumpspecs | grep -q "fno-stack-protector:" ; then
+			epatch "${GCC_FILESDIR}"/3.4.0/gcc-3.4.0-cc1-no-stack-protector.patch
+		fi
+	fi
+
+	BRANDING_GCC_PKGVERSION="${BRANDING_GCC_PKGVERSION}, ssp-${PP_FVER:-${PP_GCC_VER}-${PP_VER}}"
+	if want_libssp ; then
+		update_gcc_for_libssp
+	else
+		update_gcc_for_libc_ssp
+	fi
+
+	# Don't build libgcc with ssp
+	sed -e 's|^\(LIBGCC2_CFLAGS.*\)$|\1 -fno-stack-protector|' \
+		-i gcc/Makefile.in || die "Failed to update gcc!"
+}
+
+# If glibc or uclibc has been patched to provide the necessary symbols itself,
+# then lets use those for SSP instead of libgcc.
+update_gcc_for_libc_ssp() {
+	if libc_has_ssp ; then
+		einfo "Updating gcc to use SSP from libc ..."
+		sed -e 's|^\(LIBGCC2_CFLAGS.*\)$|\1 -D_LIBC_PROVIDES_SSP_|' \
+			-i "${S}"/gcc/Makefile.in || die "Failed to update gcc!"
+	fi
+}
+
+# a split out non-libc non-libgcc ssp requires additional spec logic changes
+update_gcc_for_libssp() {
+	einfo "Updating gcc to use SSP from libssp..."
+	sed -e 's|^\(INTERNAL_CFLAGS.*\)$|\1 -D_LIBSSP_PROVIDES_SSP_|' \
+		-i "${S}"/gcc/Makefile.in || die "Failed to update gcc!"
+}
+
 # do various updates to PIE logic
 do_gcc_PIE_patches() {
-	want_pie || return 0
+	if ! want_pie || \
+	   (want_boundschecking && [[ ${HTB_EXCLUSIVE} == "true" ]])
+	then
+		return 0
+	fi
+
+	want_boundschecking \
+		&& rm -f "${WORKDIR}"/piepatch/*/*-boundschecking-no.patch* \
+		|| rm -f "${WORKDIR}"/piepatch/*/*-boundschecking-yes.patch*
 
 	use vanilla && return 0
 
@@ -1850,12 +2201,6 @@
 	sed -e '/^ALL_CFLAGS/iHARD_CFLAGS = ' \
 		-e 's|^ALL_CFLAGS = |ALL_CFLAGS = $(HARD_CFLAGS) |' \
 		-i "${S}"/gcc/Makefile.in
-	# Need to add HARD_CFLAGS to ALL_CXXFLAGS on >= 4.7
-	if tc_version_is_at_least 4.7.0 ; then
-		sed -e '/^ALL_CXXFLAGS/iHARD_CFLAGS = ' \
-                        -e 's|^ALL_CXXFLAGS = |ALL_CXXFLAGS = $(HARD_CFLAGS) |' \
-                        -i "${S}"/gcc/Makefile.in
-	fi
 
 	BRANDING_GCC_PKGVERSION="${BRANDING_GCC_PKGVERSION}, pie-${PIE_VER}"
 }
@@ -1941,18 +2286,20 @@
 	tc_version_is_at_least 4.3 && return 0
 
 	local version_string=${GCC_CONFIG_VER}
-	[[ -n ${BRANCH_UPDATE} ]] && version_string+=" ${BRANCH_UPDATE}"
+	[[ -n ${BRANCH_UPDATE} ]] && version_string="${version_string} ${BRANCH_UPDATE}"
 
 	einfo "patching gcc version: ${version_string} (${BRANDING_GCC_PKGVERSION})"
 
-	local gcc_sed=( -e 's:gcc\.gnu\.org/bugs\.html:bugs\.gentoo\.org/:' )
 	if grep -qs VERSUFFIX "${S}"/gcc/version.c ; then
-		gcc_sed+=( -e "/VERSUFFIX \"\"/s:\"\":\" (${BRANDING_GCC_PKGVERSION})\":" )
+		sed -i -e "s~VERSUFFIX \"\"~VERSUFFIX \" (${BRANDING_GCC_PKGVERSION})\"~" \
+			"${S}"/gcc/version.c || die "failed to update VERSUFFIX with Gentoo branding"
 	else
 		version_string="${version_string} (${BRANDING_GCC_PKGVERSION})"
-		gcc_sed+=( -e "/const char version_string\[\] = /s:= \".*\":= \"${version_string}\":" )
+		sed -i -e "s~\(const char version_string\[\] = \"\).*\(\".*\)~\1$version_string\2~" \
+			"${S}"/gcc/version.c || die "failed to update version.c with Gentoo branding."
 	fi
-	sed -i "${gcc_sed[@]}" "${S}"/gcc/version.c || die
+	sed -i -e 's~gcc\.gnu\.org\/bugs\.html~bugs\.gentoo\.org\/~' \
+		"${S}"/gcc/version.c || die "Failed to change the bug URL"
 }
 
 # This is a historical wart.  The original Gentoo/amd64 port used:
@@ -1987,10 +2334,7 @@
 
 	if [[ ${SYMLINK_LIB} == "yes" ]] ; then
 		einfo "updating multilib directories to be: ${libdirs}"
-		# drop the 4.6.2 stuff once 4.7 goes stable
-		if tc_version_is_at_least 4.7 ||
-		   ( tc_version_is_at_least 4.6.2 && has x32 $(get_all_abis) )
-		then
+		if tc_version_is_at_least 4.7 && [[ ${CTARGET} == x86_64*-linux* ]] ; then
 			set -- -e '/^MULTILIB_OSDIRNAMES.*lib32/s:[$][(]if.*):../lib32:'
 		else
 			set -- -e "/^MULTILIB_OSDIRNAMES/s:=.*:= ${libdirs}:"
@@ -2003,15 +2347,17 @@
 }
 
 disable_multilib_libjava() {
+	if is_gcj ; then
 	# We dont want a multilib libjava, so lets use this hack taken from fedora
-	sed -i -r \
-		-e 's/^((all:) all-redirect)/ifeq (\$(MULTISUBDIR),)\n\1\nelse\n\2\n\techo Multilib libjava disabled\nendif/' \
-		-e 's/^((install:) install-redirect)/ifeq (\$(MULTISUBDIR),)\n\1\nelse\n\2\n\techo Multilib libjava disabled\nendif/' \
-		-e 's/^((check:) check-redirect)/ifeq (\$(MULTISUBDIR),)\n\1\nelse\n\2\n\techo Multilib libjava disabled\nendif/' \
-		-e 's/^((all:) all-recursive)/ifeq (\$(MULTISUBDIR),)\n\1\nelse\n\2\n\techo Multilib libjava disabled\nendif/' \
-		-e 's/^((install:) install-recursive)/ifeq (\$(MULTISUBDIR),)\n\1\nelse\n\2\n\techo Multilib libjava disabled\nendif/' \
-		-e 's/^((check:) check-recursive)/ifeq (\$(MULTISUBDIR),)\n\1\nelse\n\2\n\techo Multilib libjava disabled\nendif/' \
-		"${S}"/libjava/Makefile.in || die
+		pushd "${S}" > /dev/null
+		sed -i -e 's/^all: all-redirect/ifeq (\$(MULTISUBDIR),)\nall: all-redirect\nelse\nall:\n\techo Multilib libjava build disabled\nendif/' libjava/Makefile.in
+		sed -i -e 's/^install: install-redirect/ifeq (\$(MULTISUBDIR),)\ninstall: install-redirect\nelse\ninstall:\n\techo Multilib libjava install disabled\nendif/' libjava/Makefile.in
+		sed -i -e 's/^check: check-redirect/ifeq (\$(MULTISUBDIR),)\ncheck: check-redirect\nelse\ncheck:\n\techo Multilib libjava check disabled\nendif/' libjava/Makefile.in
+		sed -i -e 's/^all: all-recursive/ifeq (\$(MULTISUBDIR),)\nall: all-recursive\nelse\nall:\n\techo Multilib libjava build disabled\nendif/' libjava/Makefile.in
+		sed -i -e 's/^install: install-recursive/ifeq (\$(MULTISUBDIR),)\ninstall: install-recursive\nelse\ninstall:\n\techo Multilib libjava install disabled\nendif/' libjava/Makefile.in
+		sed -i -e 's/^check: check-recursive/ifeq (\$(MULTISUBDIR),)\ncheck: check-recursive\nelse\ncheck:\n\techo Multilib libjava check disabled\nendif/' libjava/Makefile.in
+		popd > /dev/null
+	fi
 }
 
 # make sure the libtool archives have libdir set to where they actually
@@ -2020,7 +2366,7 @@
 fix_libtool_libdir_paths() {
 	pushd "${ED}" >/dev/null
 
-	pushd "./${1}" >/dev/null
+	pushd "./${1#/}" >/dev/null
 	local dir="${PWD#${D%/}}"
 	local allarchives=$(echo *.la)
 	allarchives="\(${allarchives// /\\|}\)"
@@ -2031,8 +2377,8 @@
 		./${dir}/*.la
 	sed -i \
 		-e "/^dependency_libs=/s:/[^ ]*/${allarchives}:${EPREFIX}/${LIBPATH##/}/\1:g" \
-		$(find ./${PREFIX}/lib* -maxdepth 3 -name '*.la') \
-		./${dir}/*.la
+		$(find ./${PREFIX#/}/lib* -maxdepth 3 -name '*.la') \
+		./${dir#/}/*.la
 
 	popd >/dev/null
 }
<--8<--
===== mutual sub-directory: "eclass/ELT-patches" =====

*** The following files appear only in the overlay ***
overlay/eclass/shebangfix.eclass: ASCII English text
overlay/eclass/ELT-patches/cygwin-install-sh: directory
overlay/eclass/ELT-patches/cygwin-ltmain: directory

*** The following files appear only in portage ***
usr/portage/eclass/ChangeLog: UTF-8 Unicode English text
usr/portage/eclass/alternatives.eclass: ASCII English text
usr/portage/eclass/ant-tasks.eclass: ASCII English text
usr/portage/eclass/apache-2.eclass: ASCII English text
usr/portage/eclass/apache-module.eclass: ASCII English text
usr/portage/eclass/aspell-dict.eclass: ASCII English text
usr/portage/eclass/autotools-utils.eclass: UTF-8 Unicode English text
usr/portage/eclass/autotools.eclass: UTF-8 Unicode English text
usr/portage/eclass/base.eclass: ASCII English text
usr/portage/eclass/bash-completion-r1.eclass: ASCII English text
usr/portage/eclass/bash-completion.eclass: HTML document, ASCII text
usr/portage/eclass/bsdmk.eclass: UTF-8 Unicode English text
usr/portage/eclass/bzr.eclass: UTF-8 Unicode English text
usr/portage/eclass/cannadic.eclass: ASCII English text
usr/portage/eclass/cdrom.eclass: ASCII English text
usr/portage/eclass/check-reqs.eclass: UTF-8 Unicode English text
usr/portage/eclass/clutter.eclass: ASCII English text
usr/portage/eclass/cmake-utils.eclass: UTF-8 Unicode English text
usr/portage/eclass/common-lisp-common-2.eclass: ASCII English text
usr/portage/eclass/common-lisp-common-3.eclass: ASCII English text
usr/portage/eclass/common-lisp-common.eclass: ASCII English text
usr/portage/eclass/common-lisp.eclass: ASCII English text
usr/portage/eclass/confutils.eclass: UTF-8 Unicode English text
usr/portage/eclass/cron.eclass: ASCII English text
usr/portage/eclass/cvs.eclass: ASCII English text
usr/portage/eclass/darcs.eclass: ASCII English text
usr/portage/eclass/db-use.eclass: ASCII English text
usr/portage/eclass/db.eclass: ASCII English text
usr/portage/eclass/depend.apache.eclass: ASCII English text
usr/portage/eclass/depend.php.eclass: ASCII English text
usr/portage/eclass/distutils.eclass: ASCII English text
usr/portage/eclass/elisp-common.eclass: Lisp/Scheme program, UTF-8 Unicode text
usr/portage/eclass/elisp.eclass: UTF-8 Unicode English text
usr/portage/eclass/embassy.eclass: ASCII English text
usr/portage/eclass/emboss.eclass: ASCII English text
usr/portage/eclass/emul-linux-x86.eclass: ASCII English text
usr/portage/eclass/enlightenment.eclass: ASCII English text
usr/portage/eclass/eutils.eclass: ASCII English text
usr/portage/eclass/fdo-mime.eclass: ASCII English text
usr/portage/eclass/findlib.eclass: ASCII English text
usr/portage/eclass/fixheadtails.eclass: ASCII English text
usr/portage/eclass/flag-o-matic.eclass: ASCII English text
usr/portage/eclass/font-ebdftopcf.eclass: ASCII English text
usr/portage/eclass/font.eclass: ASCII English text
usr/portage/eclass/fortran-2.eclass: ASCII English text
usr/portage/eclass/fox.eclass: ASCII English text
usr/portage/eclass/freebsd.eclass: UTF-8 Unicode English text
usr/portage/eclass/freedict.eclass: ASCII English text
usr/portage/eclass/games-ggz.eclass: ASCII English text
usr/portage/eclass/games-mods.eclass: ASCII English text
usr/portage/eclass/games.eclass: ASCII English text
usr/portage/eclass/gdesklets.eclass: ASCII English text
usr/portage/eclass/gems.eclass: ASCII English text
usr/portage/eclass/ghc-package.eclass: ASCII English text
usr/portage/eclass/git-2.eclass: UTF-8 Unicode English text
usr/portage/eclass/git.eclass: ASCII English text
usr/portage/eclass/gkrellm-plugin.eclass: ASCII English text
usr/portage/eclass/gnat.eclass: ASCII English text
usr/portage/eclass/gnatbuild.eclass: ASCII English text
usr/portage/eclass/gnome-python-common.eclass: ASCII English text
usr/portage/eclass/gnome.org.eclass: ASCII English text
usr/portage/eclass/gnome2-utils.eclass: ASCII English text
usr/portage/eclass/gnome2.eclass: ASCII English text
usr/portage/eclass/gnuconfig.eclass: ASCII English text
usr/portage/eclass/gnustep-2.eclass: ASCII English text
usr/portage/eclass/gnustep-base.eclass: ASCII English text
usr/portage/eclass/go-mono.eclass: ASCII English text
usr/portage/eclass/gpe.eclass: ASCII English text
usr/portage/eclass/gst-plugins-bad.eclass: ASCII English text
usr/portage/eclass/gst-plugins-base.eclass: ASCII English text
usr/portage/eclass/gst-plugins-good.eclass: ASCII English text
usr/portage/eclass/gst-plugins-ugly.eclass: ASCII English text
usr/portage/eclass/gst-plugins10.eclass: ASCII English text
usr/portage/eclass/gtk-sharp-module.eclass: ASCII English text
usr/portage/eclass/haskell-cabal.eclass: ASCII English text
usr/portage/eclass/horde.eclass: ASCII English text
usr/portage/eclass/java-ant-2.eclass: UTF-8 Unicode English text
usr/portage/eclass/java-mvn-src.eclass: ASCII C++ program text
usr/portage/eclass/java-osgi.eclass: UTF-8 Unicode English text
usr/portage/eclass/java-pkg-2.eclass: ASCII English text
usr/portage/eclass/java-pkg-opt-2.eclass: ASCII text
usr/portage/eclass/java-pkg-simple.eclass: ASCII C++ program text
usr/portage/eclass/java-utils-2.eclass: ASCII English text
usr/portage/eclass/java-virtuals-2.eclass: ASCII English text
usr/portage/eclass/java-vm-2.eclass: ASCII English text
usr/portage/eclass/kde4-base.eclass: ASCII English text
usr/portage/eclass/kde4-functions.eclass: ASCII English text
usr/portage/eclass/kde4-meta-pkg.eclass: ASCII English text
usr/portage/eclass/kde4-meta.eclass: ASCII English text
usr/portage/eclass/kernel-2.eclass: ASCII English text
usr/portage/eclass/latex-package.eclass: ASCII English text
usr/portage/eclass/leechcraft.eclass: ASCII English text
usr/portage/eclass/linux-info.eclass: ASCII English text
usr/portage/eclass/linux-mod.eclass: ASCII English text
usr/portage/eclass/makeedit.eclass: ASCII English text
usr/portage/eclass/mercurial.eclass: ASCII English text
usr/portage/eclass/mono.eclass: ASCII English text
usr/portage/eclass/mount-boot.eclass: ASCII English text
usr/portage/eclass/mozconfig-3.eclass: ASCII English text
usr/portage/eclass/mozcoreconf-2.eclass: ASCII English text
usr/portage/eclass/mozextension.eclass: ASCII English text
usr/portage/eclass/mozilla-launcher.eclass: ASCII English text
usr/portage/eclass/mozlinguas.eclass: ASCII English text
usr/portage/eclass/myspell.eclass: ASCII English text
usr/portage/eclass/mysql-autotools.eclass: ASCII English text
usr/portage/eclass/mysql-cmake.eclass: ASCII English text
usr/portage/eclass/mysql-v2.eclass: ASCII English text
usr/portage/eclass/mysql.eclass: ASCII English text
usr/portage/eclass/mysql_fx.eclass: ASCII English text
usr/portage/eclass/mythtv-plugins.eclass: ASCII English text
usr/portage/eclass/mythtv.eclass: ASCII English text
usr/portage/eclass/nsplugins.eclass: ASCII English text
usr/portage/eclass/nvidia-driver.eclass: ASCII English text
usr/portage/eclass/obs-download.eclass: ASCII English text
usr/portage/eclass/obs-service.eclass: ASCII English text
usr/portage/eclass/office-ext.eclass: UTF-8 Unicode English text
usr/portage/eclass/openib.eclass: ASCII English text
usr/portage/eclass/pam.eclass: UTF-8 Unicode English text
usr/portage/eclass/pax-utils.eclass: ASCII English text
usr/portage/eclass/perl-app.eclass: ASCII English text
usr/portage/eclass/perl-module.eclass: ASCII English text
usr/portage/eclass/php-common-r1.eclass: ASCII English text
usr/portage/eclass/php-ext-base-r1.eclass: ASCII English text
usr/portage/eclass/php-ext-pecl-r1.eclass: ASCII English text
usr/portage/eclass/php-ext-pecl-r2.eclass: ASCII English text
usr/portage/eclass/php-ext-source-r1.eclass: ASCII English text
usr/portage/eclass/php-ext-source-r2.eclass: ASCII English text
usr/portage/eclass/php-ezc.eclass: ASCII English text
usr/portage/eclass/php-lib-r1.eclass: ASCII English text
usr/portage/eclass/php-pear-lib-r1.eclass: ASCII English text
usr/portage/eclass/php-pear-r1.eclass: ASCII English text
usr/portage/eclass/phpconfutils.eclass: ASCII English text
usr/portage/eclass/portability.eclass: UTF-8 Unicode English text
usr/portage/eclass/prefix.eclass: ASCII English text
usr/portage/eclass/python.eclass: ASCII English text, with very long lines
usr/portage/eclass/qmail.eclass: ASCII English text
usr/portage/eclass/qt4-build.eclass: ASCII English text
usr/portage/eclass/qt4-r2.eclass: ASCII English text
usr/portage/eclass/qt4.eclass: ASCII English text
usr/portage/eclass/rox-0install.eclass: ASCII English text
usr/portage/eclass/rox.eclass: ASCII English text
usr/portage/eclass/rpm.eclass: ASCII English text
usr/portage/eclass/ruby-fakegem.eclass: Ruby script, UTF-8 Unicode text
usr/portage/eclass/ruby-ng-gnome2.eclass: ASCII English text
usr/portage/eclass/ruby-ng.eclass: UTF-8 Unicode English text
usr/portage/eclass/ruby.eclass: ASCII English text
usr/portage/eclass/savedconfig.eclass: ASCII English text
usr/portage/eclass/scons-utils.eclass: ASCII English text
usr/portage/eclass/scsh.eclass: ASCII English text
usr/portage/eclass/selinux-policy-2.eclass: ASCII English text
usr/portage/eclass/sgml-catalog.eclass: ASCII English text
usr/portage/eclass/ssl-cert.eclass: ASCII English text
usr/portage/eclass/stardict.eclass: ASCII English text
usr/portage/eclass/subversion.eclass: UTF-8 Unicode English text
usr/portage/eclass/sword-module.eclass: ASCII English text
usr/portage/eclass/systemd.eclass: ASCII English text
usr/portage/eclass/tests: directory
usr/portage/eclass/tetex-3.eclass: ASCII English text
usr/portage/eclass/tetex.eclass: ASCII English text
usr/portage/eclass/texlive-common.eclass: ASCII English text
usr/portage/eclass/texlive-module.eclass: ASCII English text
usr/portage/eclass/tla.eclass: ASCII English text
usr/portage/eclass/toolchain-binutils.eclass: ASCII English text
usr/portage/eclass/toolchain-funcs.eclass: ASCII English text
usr/portage/eclass/twisted.eclass: Python script, ASCII text executable
usr/portage/eclass/unpacker.eclass: ASCII English text
usr/portage/eclass/user.eclass: ASCII English text
usr/portage/eclass/vdr-plugin.eclass: ASCII English text
usr/portage/eclass/versionator.eclass: ASCII English text
usr/portage/eclass/vim-doc.eclass: ASCII English text
usr/portage/eclass/vim-plugin.eclass: ASCII English text
usr/portage/eclass/vim-spell.eclass: exported SGML document, ASCII text
usr/portage/eclass/vim.eclass: ASCII English text
usr/portage/eclass/virtualx.eclass: ASCII English text
usr/portage/eclass/virtuoso.eclass: ASCII English text
usr/portage/eclass/vmware-bundle.eclass: ASCII English text
usr/portage/eclass/vmware-mod.eclass: ASCII English text
usr/portage/eclass/vmware.eclass: ASCII English text
usr/portage/eclass/waf-utils.eclass: UTF-8 Unicode English text
usr/portage/eclass/webapp.eclass: ASCII English text
usr/portage/eclass/wxwidgets.eclass: ASCII English text
usr/portage/eclass/x-modular.eclass: ASCII English text
usr/portage/eclass/xemacs-elisp-common.eclass: Lisp/Scheme program, UTF-8 Unicode text
usr/portage/eclass/xemacs-elisp.eclass: ASCII English text
usr/portage/eclass/xemacs-packages.eclass: ASCII English text
usr/portage/eclass/xfconf.eclass: ASCII English text
usr/portage/eclass/xorg-2.eclass: UTF-8 Unicode English text
usr/portage/eclass/zproduct.eclass: ASCII English text
usr/portage/eclass/ELT-patches/aix-noundef: directory
usr/portage/eclass/ELT-patches/aixrtl: directory
usr/portage/eclass/ELT-patches/as-needed: directory
usr/portage/eclass/ELT-patches/cross: directory
usr/portage/eclass/ELT-patches/darwin-conf: directory
usr/portage/eclass/ELT-patches/darwin-ltconf: directory
usr/portage/eclass/ELT-patches/darwin-ltmain: directory
usr/portage/eclass/ELT-patches/deplibs: directory
usr/portage/eclass/ELT-patches/fbsd-conf: directory
usr/portage/eclass/ELT-patches/fbsd-ltconf: directory
usr/portage/eclass/ELT-patches/fix-relink: directory
usr/portage/eclass/ELT-patches/gold-conf: directory
usr/portage/eclass/ELT-patches/hardcode: directory
usr/portage/eclass/ELT-patches/hardcode-relink: directory
usr/portage/eclass/ELT-patches/hc-flag-ld: directory
usr/portage/eclass/ELT-patches/hpux-conf: directory
usr/portage/eclass/ELT-patches/install-sh: directory
usr/portage/eclass/ELT-patches/irix-ltmain: directory
usr/portage/eclass/ELT-patches/ltmain: directory
usr/portage/eclass/ELT-patches/max_cmd_len: directory
usr/portage/eclass/ELT-patches/mint-conf: directory
usr/portage/eclass/ELT-patches/no-lc: directory
usr/portage/eclass/ELT-patches/nocxx: directory
usr/portage/eclass/ELT-patches/portage: directory
usr/portage/eclass/ELT-patches/relink: directory
usr/portage/eclass/ELT-patches/relink-prog: directory
usr/portage/eclass/ELT-patches/rem-int-dep: directory
usr/portage/eclass/ELT-patches/sed: directory
usr/portage/eclass/ELT-patches/sys-lib-dlsearch: directory
usr/portage/eclass/ELT-patches/test: directory
usr/portage/eclass/ELT-patches/tmp: directory
usr/portage/eclass/ELT-patches/uclibc-conf: directory
usr/portage/eclass/ELT-patches/uclibc-ltconf: directory

