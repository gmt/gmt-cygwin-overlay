#!/bin/ash

#
# Copyright (c) 2009,2011 Charles Wilson
#               2012 Greg Turner
# Based on rebaseall by Jason Tishler
# Cygwin prefix support by Greg Turner <gmturner007@ameritech.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# See the COPYING file for full license information.

cd /bin
PATH=/bin

# Define constants
tp1=${0%/*}
tp2=${tp1:-.}

ProgramName=${0##*/}
ProgramOptions='p:d:D:t:s:T:P:knvh'
# DefaultExtraArgs="--cygwin-heap=512"
DefaultExtraArgs=
DefaultTSAware=1
DefaultDynBase=0
DefaultKeep=
DefaultDoNothing=
DefaultVerbose=
DefaultFileList=
DefaultSuffixes='exe|dll|so|oct'
ExtraDirList=
ForceAshOrDashOnly='no'
TEMP=/tmp

# Define functions
usage_string="usage: $ProgramName [-p extra_args] [-P EPREFIX] [-D extra_dirs]
    [-d bool] [-t bool] [-s suffix] [-T FileList | -] [-vnh]"

short_usage ()
{
    echo "$usage_string" 1>&2
    exit 1
}

long_help ()
{
    echo "$usage_string"
    echo "When invoked with no arguments, $ProgramName modifies every cygwin $DefaultSuffixes"
    echo "on the system: .exe files have their tsaware flag set, while .dll and .so files"
    echo "have their dynamicbase flag set. However, if any of [-d|-t|-s] are specified"
    echo "then ONLY the actions so specified will occur."
    echo "   -p extra_args   pass extra_args to peflags.exe"  
    echo "   -P EPREFIX      set the EPREFIX (otherwise set the EPREFIX environment var)"
    echo "   -d bool         set the dynamicbase flag to 'bool' on all specified files"
    echo "   -D extra_dirs   traverse these directories in addition to the standard ones"
    echo "   -t bool         set the tsaware flag to 'bool' on all specified files"
    echo "   -o              force only ash or dash to be running"
    echo "   -s suffix       search for all files with the specified suffix(es)"
    echo "                     default: 'exe|dll|so|oct'"
    echo "   -T FileList     in addition to files located via the normal search and"
    echo "                   suffix list, also operate on files listed in FileList"
    echo "                   May be '-' which indicates stdin"
    echo "   -n              do not modify any files, but display the peflags commands"
    echo "   -k              keep all temporary files"
    echo "   -v              verbose mode"
    echo "   -h              show this help"
    echo "bool may be '0', '1', 'true', 'false', 'yes', or 'no'"
    echo "Note: peflagsall will NOT set the dynamicbase flag on executables, nor will"
    echo "      it set the tsaware flag on dlls. If you must do this, use peflags itself"
    exit 0
}

check_args_for_help()
{
    # we do this early, so that we can print help before
    # the process-check.
    for a in "$@"
    do
        case "$a" in
        "--help"|"-help"|"-h") long_help ;;
        esac
    done
}

to_bool_result=
to_bool()
{
    case "$1" in
    [Tt][Rr][Uu][Ee]     ) to_bool_result=1;;
    [Ff][Aa][Ll][Ss][Ee] ) to_bool_result=0;;
    [Yy][Ee][Ss]         ) to_bool_result=1;;
    [Nn][Oo]             ) to_bool_result=0;;
    [Yy]                 ) to_bool_result=1;;
    [Nn]                 ) to_bool_result=0;;
    1|0                  ) to_bool_result=$1;;
    *) echo "Bad bool argument '$1'" 1>&2
       short_usage
       exit 1
    esac
}

cleanup()
{
    if test -z "$Keep"
    then
    	rm -f "$TmpFile" "$ExeFile" "$DllFile"
    else
        echo "Saving temp files '$TmpDir/peflags_*' (may not exist)" 1>&2
    fi
    exit $ExitCode
}

verbose_only()
{
    if test -n "$Verbose"
    then
        echo "$@" 1>&2
    fi
}

# Set traps
trap cleanup 1 2 15

# Set defaults
ExtraArgs="$DefaultExtraArgs"
TSAware=$DefaultTSAware
DynBase=$DefaultDynBase
Keep=$DefaultKeep
DoNothing=$DefaultDoNothing
Verbose=$DefaultVerbose
FileList=$DefaultFileList
Suffixes=$DefaultSuffixes
if [ -n "${EPREFIX}" ] ; then
    EPrefix="${EPREFIX}"
else
    EPrefix=
fi

# Argument accumulators
ArgSuffixes=
ArgTSAware=
ArgDynBase=

# First see if caller requested help
check_args_for_help "$@"

# Determine platform
Platform=`uname -s`
case $Platform in
 *CYGWIN* | *cygwin* ) Platform=cygwin ;;
 * )
    echo "Unsupported platform: $Platform" 1>&2
    exit 1
    ;;
esac

# Parse command line arguments
while getopts $ProgramOptions Option "$@"
do
    case $Option in
    p)  ExtraArgs="$OPTARG";;
    P)  EPrefix="$OPTARG";;
    d)  to_bool "$OPTARG"; ArgDynBase=$to_bool_result;;
    D)  ExtraDirList="$OPTARG";;
    t)  to_bool "$OPTARG"; ArgTSAware=$to_bool_result;;
    s)
	if test -z "$ArgSuffixes"
        then
		ArgSuffixes="$OPTARG"
	else
		ArgSuffixes="$ArgSuffixes|$OPTARG"
	fi
	;;
    n)  DoNothing=:;;
    o)  ForceAshOrDashOnly="yes";;
    k)  Keep=1;;
    T)  FileList="$OPTARG";;
    v)  Verbose=-v;;
    h)  long_help;;
    \?) short_usage;;
    esac
done

PATH=$EPrefix/bin:$EPrefix/usr/bin:$EPrefix/sbin:$EPrefix/usr/sbin:/bin
export PATH

# Verify only ash or dash processes are running
ProcessResult=0
stopthese="$( grep -E -i -v '/(d?ash(.exe)?|grep(.exe)?)$' /proc/[0-9]*/exename )"
ProcessResult=$?
if [ $ProcessResult -eq 0 -a -z "$RebaseDebug" ]
then
    if [ $ForceAshOrDashOnly = yes ]
    then
        echo "$ProgramName: only ash or dash processes are allowed during this process."
    else
        echo "$ProgramName: WARNING: non-ash, non-dash processes running during peflagsall."
    fi
    echo "    Exit all Cygwin processes and stop all Cygwin services."
    echo "    Execute ash (or dash) from Start/Run... or a cmd or command window."
    echo "    Execute '/bin/peflagsall' from ash (or dash)."
    echo
    echo "The following processes should be stopped:"
    echo "${stopthese}" | sed 's|/proc/\([0-9]*\)/exename:\(.*\)$|\2 (PID: \1)|'
    echo
    if [ $ForceAshOrDashOnly = yes ]
    then
        exit 2
    fi
fi

# Evaluate command line arguments
if test -n "$ArgSuffixes" || test -n "$ArgDynBase" || test -n "$ArgTSAware"
then
    echo "Using custom arguments; all default behavior suppressed" 1>&2
    Suffixes="$ArgSuffixes"
    DynBase="$ArgDynBase"
    TSAware="$ArgTSAware"
fi
if test -z "$Suffixes"
then
    echo "Error: must specify suffixes (-s) when default behavior is suppressed" 1>&2
    short_usage
fi


# Set temp directory
TmpDir="${TMP:-${TEMP:-/tmp}}"

# Validate temp directory
if [ ! -d "$TmpDir" ]
then
    echo "$ProgramName: '$TmpDir' is not a directory" 1>&2
    exit 2
fi
if [ ! -w "$TmpDir" ]
then
    echo "$ProgramName: '$TmpDir' is not writable" 1>&2
    exit 2
fi

# Validate user supplied file list, if necessary
if [ -n "$FileList" -a ! -r "$FileList" -a "$FileList" != - ]
then
    echo "$ProgramName: '$FileList' is not readable" 1>&2
    exit 2
fi

case "${EPrefix}" in
    /*)
        foo=bar # noop
	;;
    *) 
        echo "$ProgramName: EPREFIX must start with '/'"
        exit 2
        ;;
esac

dirlist=

check_dirs() {
    for d in "$@" ; do
        if [ ! -d "$d" ] ; then
            echo "$ProgramName: '$d' is not a directory (ignored)"
            continue
        fi
	if [ x${dirlist} = x ] ; then
	    dirlist="${d}"
        else
            dirlist="${dirlist}:${d}"
        fi
    done
}

check_dirs "${EPrefix}/bin" "${EPrefix}/usr/bin" "${EPrefix}/sbin" "${EPrefix}/usr/sbin" \
		"${EPrefix}"/usr/i686-pc-cygwin1.7/binutils-bin/* \
		"${EPrefix}"/usr/i686-pc-cygwin1.7/gcc-bin/* "/usr/bin" \
		"${EPrefix}/lib" "${EPrefix}/usr/lib"
		# "/usr/lib"

# Validate ExtraDirList
if [ -n "$ExtraDirList" ]
then
    echo "${ExtraDirList}" | sed 's/:/\n/g' | while read d ; do
        if [ ! -d "${d}" ] ; then
		echo "$ProgramName: '$d' is not a directory"
		exit 7
	fi
    done
    # lol /bin/sh
    if [ $? -eq 7 ] ; then
	    exit 2
    fi
fi

# Set temp files
TmpFile="$TmpDir/peflags.lst"
ExeFile="$TmpDir/peflags_exe.lst"
DllFile="$TmpDir/peflags_dll.lst"

# Create file list
# the following can be used to siphon out python libraries if needed... ?
# grep -E -v -e '(libpython[[:digit:].-_]*\.dll$|/lib/python[[:digit:].-_]*/)' | \
( if [ -n "${dirlist}" ] ; then echo "${dirlist}" | sed 's/:/\n/g' | while read d ; do
      echo "Scanning \"${d}\"..." >&2
      find "${d}" # -name '*.dll' -o -name '*.so'
  done ; fi
  if [ -n "$ExtraDirList" ] ; then echo "${ExtraDirList}" | sed 's/:/\n/g' | while read d ; do
      echo "Scanning \"${d}\"..." >&2
      find "${d}" # -name '*.dll' -o -name '*.so'
  done ; fi ) | \
  grep -E "\.($Suffixes)\$" | \
  sed -e '/cygwin1\.dll$/d' -e '/cyglsa.*\.dll$/d' \
      -e '/sys-root\/mingw/d' \
      -e '/\/ebuild-helpers\/dolib.so$/d' \
      -e '/\/ebuild-helpers\/newlib.so$/d' \
      -e '/^\/usr\/bin\/d\?ash\.exe$/d' -e '/^\/usr\/bin\/peflags\.exe$/d' >"${TmpFile}"

# Append user supplied file list, if any
if [ -n "$FileList" ]
then
    cat "$FileList" >>"$TmpFile"
fi

# Split file list into two groups: exe's, and everything else
# (presumably, DLLs by any name).
sed -n -e '/\.[Ee][Xx][Ee]$/p' < "$TmpFile" > "$ExeFile"
sed    -e '/\.[Ee][Xx][Ee]$/d' < "$TmpFile" > "$DllFile"
NumExes=`cat "$ExeFile" | sed -n '$='`
NumDlls=`cat "$DllFile" | sed -n '$='`

# Prepare to do exes
DoExes=
TSAwareCmd="--tsaware=$TSAware"
if test -n "$NumExes" && test "$NumExes" -gt 0
then
    if test -n "$TSAware" || test -n "$ExtraArgs"
    then
       DoExes=1
       if test -z "$TSAware"
       then
           TSAwareCmd=
       fi
    else
       verbose_only "Not processing $NumExes executables; neither -t nor -p specified"
    fi
else
    verbose_only "No executable files to process"
fi

# Prepare to do dlls
DoDlls=
DynBaseCmd="--dynamicbase=$DynBase"
if test -n "$NumDlls" && test "$NumDlls" -gt 0
then
    if test -n "$DynBase" || test -n "$ExtraArgs"
    then
       DoDlls=1
       if test -z "$DynBase"
       then
           DynBaseCmd=
       fi
    else
       verbose_only "Not processing $NumDlls dlls; neither -d nor -p specified"
    fi
else
    verbose_only "No dlls to process"
fi

if test -n "$DoExes"
then
    if test -n "$DoNothing" || test -n "$Verbose"
    then
        echo "peflags $Verbose $ExtraArgs $TSAwareCmd -T $ExeFile" 1>&2
    fi
    if test -n "$Verbose" ; then
 	   $DoNothing peflags $Verbose $ExtraArgs $TSAwareCmd -T "$ExeFile"
    else
	   mkdir -p $EPrefix/var/log
	   $DoNothing peflags $ExtraArgs $TSAwareCmd -T "$ExeFile" >> $EPrefix/var/log/peflagsall_pfx.log
    fi
fi
ExitCode=$?

if test "$ExitCode" -eq 0
    then
    if test -n "$DoDlls" ; then
        if test -n "$DoNothing" || test -n "$Verbose"
        then
            echo "peflags $Verbose $ExtraArgs $DynBaseCmd -T $DllFile" 1>&2
        fi
    	if test -n "$Verbose" ; then
        	$DoNothing peflags $Verbose $ExtraArgs $DynBaseCmd -T "$DllFile"
 	else
        	mkdir -p $EPrefix/var/log
        	$DoNothing peflags $ExtraArgs $DynBaseCmd -T "$DllFile" >> $EPrefix/var/log/peflagsall_pfx.log
	fi
    fi
    ExitCode=$?
fi

# Clean up
cleanup

