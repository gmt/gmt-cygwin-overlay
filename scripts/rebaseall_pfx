#!/bin/ash

# Copyright (c) 2003, 2005, 2006, 2008, 2011, 2012 Jason Tishler
#               2012 Greg Turner
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# See the COPYING file for full license information.
#
# Written by Jason Tishler <jason@tishler.net>
# cygwin-prefix support by Greg Turner <gmturner007@ameritech.net>

# Somehow a lot of /cygdrive/c/cygwin/foo paths end up floating around in Cygwin's brain
# despite more efficient /foo representations.  It couldn't hurt to keep them out of PWD
# and PATH.
cd /bin
PATH=/bin

# Define constants
tp1=${0%/*}
tp2=${tp1:-.}
ProgramName=${0##*/}
ProgramOptions='48o:ps:P:tT:D:v'
# by leaving this gap, we leave room for ASLR to work its magic
DefaultBaseAddress=0x70000000
PrefixBaseAddress=0x79000000
DefaultNoDyn=
DefaultOffset=0
DefaultTouch=
DefaultVerbose=
DefaultFileList=
DefaultSuffixes='dll|so|oct'
ExtraDirList=

# Define functions
usage()
{
    echo "usage: ${ProgramName} [-P EPREFIX] [-o Offset] [-s DllSuffix] [-T FileList | -]] [-D ExtraDirList] [-4|-8] [-p] [-t] [-v]"

    echo
    echo '  Separate "ExtraDirList" options with colons like in a ${PATH}'
    echo '  Either use the -P argument or export the EPREFIX environment variable'
    echo
    exit 1
}

cleanup()
{
    rm -f "${TmpFile}"
    exit ${ExitCode}
}

# Set traps
trap cleanup 1 2 15

# Set defaults
BaseAddress=""
Offset="${DefaultOffset}"
Touch="${DefaultTouch}"
NoDyn="${DefaultNoDyn}"
Verbose="${DefaultVerbose}"
FileList="${DefaultFileList}"
Suffixes="${DefaultSuffixes}"
if [ -n "${EPREFIX}" ] ; then
    EPrefix="${EPREFIX}"
else
    EPrefix=
fi
db_file_i386="/etc/rebase.db.i386"
db_file_x86_64="/etc/rebase.db.x86_64"
force_dash_only="no"
case `uname -m` in
    i[3456]86)
	db_file="${db_file_i386}";
	Mach="-4"
	;;
    x86_64)
	Mach="-8"
	db_file="${db_file_x86_64}"
	;;
esac

# Determine platform
Platform=`uname -s`
case $Platform in
 *MINGW*  | *mingw*  ) Platform=mingw  ;;
 *CYGWIN* | *cygwin* ) Platform=cygwin ;;
 *MSYS*   | *msys*   ) Platform=msys   ;;
 * )
    echo "Unsupported platform: $Platform" 1>&2
    exit 1
    ;;
esac

# Parse command line arguments
while getopts "${ProgramOptions}" Option "$@"
do
    case "${Option}" in
    4)
	db_file="${db_file_i386}";
	Mach="-4"
	;;
    8)
	Mach="-8"
	db_file="${db_file_x86_64}"
	;;
    o)
	Offset="${OPTARG}";;
    p)
	force_dash_only="yes";;
    P)
        EPrefix="${OPTARG}";;
    s)
	Suffixes="${Suffixes}|${OPTARG}";;
    t)
	Touch="-t";;
    T)
	FileList="${OPTARG}";;
    D)
    	ExtraDirList="${OPTARG}";;
    v)
	Verbose="-v";;
    \?)
	usage;;
    esac
done

PATH=$EPrefix/bin:$EPrefix/usr/bin:$EPrefix/sbin:$EPrefix/usr/sbin:/bin

# Verify only ash or dash processes are running
ProcessResult=0
case $Platform in
  mingw|msys )
    /bin/ps -s | /bin/gawk '\
# Count number of running ash or dash. \
/\/bin\/(d)?ash(\.exe)?$/{ ash_cnt++; } \
# Count number of ps and gawk. \
/\/bin\/ps(\.exe)?$/{ cnt++; } \
/\/bin\/gawk(\.exe)?$/{ cnt++; } \
END{ \
  # Uncomment for testing: \
  # printf "TOTAL: %d CNT: %d ASH_CNT: %d\n", NR, cnt, ash_cnt; \
  # Only one of ps and gawk each may run. \
  if (cnt > 2) \
    exit 0; \
  # The total number of allowed processes is one less than the \
  # number of input lines.  The extra line is the ps header output. \
  if (NR - cnt - ash_cnt > 1) \
    exit 0; \
  # All is well. \
  exit 1; \
}'
    ProcessResult=$?
    ;;
  cygwin )
    grep -E -q -i -v '/d?ash(.exe)?$' /proc/[0-9]*/exename
    ProcessResult=$?
    ;;
esac

if [ $ProcessResult -eq 0 -a -z "${RebaseDebug}" ]
then
  if [ $force_dash_only = yes ]
  then
    echo "${ProgramName}: only ash or dash processes are allowed during rebasing"
  else
    echo "${ProgramName}: WARNING: non-ash, non-dash processes present during rebasing"
  fi
  echo "    Exit all Cygwin processes and stop all Cygwin services."
  echo "    Execute ash (or dash) from Start/Run... or a cmd or command window."
  echo "    Execute the rebaseall_pfx script from ash (or dash)."
  echo
  echo "The following processes caused this message:"
  grep -E -i -v '/d?ash(.exe)?$' /proc/[0-9]*/exename
  echo
  if [ $force_dash_only = yes ]
  then
    exit 2
  fi
fi

BaseAddress=$DefaultBaseAddress

# Set temp directory
TmpDir="${TMP:-${TEMP:-/tmp}}"

# Validate temp directory
if [ ! -d "$TmpDir" ]
then
    echo "$ProgramName: '$TmpDir' is not a directory"
    exit 2
fi
if [ ! -w "$TmpDir" ]
then
    echo "$ProgramName: '$TmpDir' is not writable"
    exit 2
fi

# Validate user supplied file list, if necessary
if [ -n "$FileList" -a ! -r "$FileList" -a "$FileList" != - ]
then
    echo "$ProgramName: '$FileList' is not readable"
    exit 2
fi

# Validate EPrefix
if [ -z "$EPrefix" ] ; then
    echo "$ProgramName: either set EPREFIX enviornment variable or supply -P argument"
    exit 2
fi

case "${EPrefix}" in
    /*)
        foo=bar # noop
	;;
    *) 
        echo "$ProgramName: EPREFIX must start with '/'"
        exit 2
        ;;
esac

dirlist=

check_dirs() {
    nupath=
    for d in "$@" ; do
        if [ ! -d "$d" ] ; then
            echo "$ProgramName: '$d' is not a directory (ignored)"
            continue
        fi
	if [ x${dirlist} = x ] ; then
	    dirlist="${d}"
        else
            dirlist="${dirlist}:${d}"
        fi
    done
}

check_dirs "${EPrefix}/bin" "${EPrefix}/usr/bin" "${EPrefix}/sbin" "${EPrefix}/usr/sbin" \
		"${EPrefix}"/usr/i686-pc-cygwin1.7/binutils-bin/* \
		"${EPrefix}"/usr/i686-pc-cygwin1.7/gcc-bin/*

		# "${EPrefix}/lib" "${EPrefix}/usr/lib" /usr/lib /usr/bin

PATH="${dirlist}:${PATH}"
export PATH

# Validate ExtraDirList
if [ -n "$ExtraDirList" ]
then
    echo "${ExtraDirList}" | sed 's/:/\n/g' | while read d ; do
        if [ ! -d "${d}" ] ; then
		echo "$ProgramName: '$d' is not a directory"
		exit 7
	fi
    done
    # lol /bin/sh
    if [ $? -eq 7 ] ; then
	    exit 2
    fi
fi

# Set temp file
TmpFile="$TmpDir/rebase.lst"

# filter for suffixes, then remove perl and python library
# directories, cygwin1.dll, lsa-dll, dash/ash, mingw sysroot,
# and the dolib.so/newlib.so files, which are actually scripts.
filter_cygwin_targets()
{
  grep -E "\.($Suffixes)\$" | \
    grep -E -v -e '/lib/(perl|python)[[:digit:].-_]*/' | \
    sed -e '/cygwin1\.dll$/d' \
      -e '/cyglsa.*\.dll$/d' \
      -e '/d?ash\.exe$/d' \
      -e '/rebase\.exe$/d' \
      -e '/sys-root\/mingw/d' \
      -e '/ebuild-helpers\/dolib.so$/d' \
      -e '/ebuild-helpers\/newlib.so$/d'
}

# Create rebase list
case $Platform in
  cygwin)
    if [ -n "${FileList}" ]
    then
      if [ -f "${FileList}" ]
      then
        echo "Scanning user-provided files in \"${FileList}\" ..." >&2
        cat "${FileList}"
      else
        echo "WARNING: FileList \"${FileList}\" provided but not found." >&2
      fi
    fi | filter_cygwin_targets > "${TmpFile}_filelist"
    if [ -n "${ExtraDirList}" ]
    then
      echo "${ExtraDirList}" | sed 's/:/\n/g' | while read d
      do
        echo "Scanning \"${d}\" (extra) ..." >&2
        find "${d}" -type f
      done
    fi | filter_cygwin_targets > "${TmpFile}_extra_dirlist"
    if [ -n "${dirlist}" ]
    then
      echo "${dirlist}" | sed 's/:/\n/g' | while read d
      do
        echo "Scanning \"${d}\ (built-in) ..." >&2
        find "${d}" -type f
      done
    fi | filter_cygwin_targets > "${TmpFile}_dirlist"
    first_lstgz=1
    for lstgz in /etc/setup/*.lst.gz
    do
      [ -f "${lstgz}" ] || continue
      if [ $first_lstgz -eq 1 ]
      then
        first_lstgz=0
	echo -n 'Scanning /etc/setup/*.lst.gz:' >&2
      fi
      lstgzbase="${lstgz##*/}"
      echo -n " ${lstgzbase%.lst.gz}" >&2
      gzip -d -c "${lstgz}" | sed -e 's/^/\//'
    done | filter_cygwin_targets > "${TmpFile}_etc_setup"

    # sigh, we have no reliable way to know if 'Scanning /etc...' was displayed
    echo >&2

    # Merge the lists, prioritizing first, FileList; second, ExtraDirList;
    # third, dirlist; and fourth, /etc/setup.  Discard non-prioritized duplicate
    # filenames with a friendly warning.
    echo "Merging lists ..." >&2
    merged_basenames=
    cat "${TmpFile}_filelist" "${TmpFile}_extra_dirlist" "${TmpFile}_dirlist" "${TmpFile}_etc_setup" | \
      while read filepath ; do
        case $filepath in
	  */) echo "WARNING: filepath ending in '/': \"${filepath}\"" >&2 ; continue;;
	esac
        filepath_basename="${filepath##*/}"
	filepath_pathname="${filepath%/*}"
        case "${merged_basenames}" in
          *"|${filepath_basename}=/"*)
	    already_have="$(
              echo "${merged_basenames}" 2>/dev/null | sed -e 's/|/\n/g' 2>/dev/null | grep -v '^[[:space:]]*$' 2>/dev/null | \
	        while read haveline
		do
		  havebasename="${haveline%=*}"
		  case x${havebasename}x in
		    x${filepath_basename}x)
                      havepathname="${haveline##*=}"
                      echo "${havepathname}/${havebasename}"
		      break
		      ;;
                  esac
		done
            )"
	    case x"${already_have}"x in
	      x"${filepath}"x)
	        what_we_are_gonna_do_about_it=nothing_cause_its_a_pathological_case
		;;
	      *)
                echo "duplicate skipped: ${filepath} (had ${already_have})" >&2
		;;
            esac
            ;;
          *)
            echo "${filepath}"
            merged_basenames="|${filepath_basename}=${filepath_pathname}|${merged_basenames}"
            ;;
        esac
      done > "${TmpFile}"
  
    # remove intermediates: they always exist, no need to check
    rm "${TmpFile}_dirlist"
    rm "${TmpFile}_extra_dirlist"
    rm "${TmpFile}_etc_setup"
    rm "${TmpFile}_filelist"

    # Unconditionally add the -n flag so rebased DLLs get the
    # dynamicbase flag removed.
    NoDyn='-n'
    ;;
  mingw|msys)
    for f in /bin /lib
    do
      find $f -type f | filter_cygwin_targets >> "${TmpFile}"
    done
    ;;
esac

# first, do a rebase of the non-prefix cygwin system; this helps keep the non-prefix
# system from getting too fucked up.  We only want the non-prefix files from TmpFile,
# not the full compliment of files.  If things get goofy, the user can just delete the
# database file and this will flush out any old non-prefix stuff causing trouble.
echo "Rebasing non-prefix cygwin files..." >&2
cat "${TmpFile}" | grep -v '^'"${EPrefix}" > "${TmpFile}_non-prefix"
if [ -e ${db_file} ]
then
  PATH=/bin rebase "${Verbose}" "${Touch}" "${NoDyn}" -s "${Mach}" -T "${TmpFile}_non-prefix"
else
  PATH=/bin rebase "${Verbose}" "${Touch}" "${NoDyn}" -s "${Mach}" -b "${BaseAddress}" -o "${Offset}" -T "${TmpFile}_non-prefix"
fi

BaseAddress="${PrefixBaseAddress}"

# now rebase the prefix stuff. ignore the database and place everything above the $BaseAddress
# cutoff, to minimize conflicts.  The prefix stuff will not stay put the way the non-prefix stuff
# does so expect running processes to cause more trouble for prefix than -non.
echo "Rebasing prefix cygwin files..." >&2
cat "${TmpFile}" | grep '^'"${EPrefix}" > "${TmpFile}_prefix"
rm "${TmpFile}"
rebase "${Verbose}" "${Touch}" "${NoDyn}" "${Mach}" "${BaseAddress}" -T "${TmpFile}_prefix"

echo -n "Determining new effective maximum base address: " >&2

ExitCode=$?

# Clean up
cleanup

# vim: syntax=sh
