#!/bin/ash

# Copyright (c) 2003, 2005, 2006, 2008, 2011 Jason Tishler
#               2012 Greg Turner
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# See the COPYING file for full license information.
#
# Written by Jason Tishler <jason@tishler.net>
# cygwin-prefix support by Greg Turner <gmturner007@ameritech.net>

# Somehow a lot of /cygdrive/c/cygwin/foo paths end up floating around in Cygwin's brain
# despite more efficient /foo representations.  This seems sensitive to rebasing so
# I'm hoping this will fix it. -gmt
cd /bin
PATH=/bin

# Define constants
tp1=${0%/*}
tp2=${tp1:-.}
ProgramName=${0##*/}
ProgramOptions='48b:o:ps:P:tT:D:v'
DefaultBaseAddress=0x70000000
DefaultOffset=0
DefaultTouch=
DefaultVerbose=
DefaultFileList=
DefaultSuffixes='dll|so|oct'
ExtraDirList=

# Define functions
usage()
{
    echo "usage: ${ProgramName} [-P EPREFIX] [-b BaseAddress] [-o Offset] [-s DllSuffix] [-T FileList | -]] [-D ExtraDirList] [-4|-8] [-p] [-t] [-v]"

    echo
    echo '  Separate "ExtraDirList" options with colons like in a ${PATH}'
    echo '  Either use the -P argument or export the EPREFIX environment variable'
    echo
    exit 1
}

cleanup()
{
    rm -f "${TmpFile}"
    exit ${ExitCode}
}

# Set traps
trap cleanup 1 2 15

# Set defaults
BaseAddress=""
Offset="${DefaultOffset}"
Touch="${DefaultTouch}"
Verbose="${DefaultVerbose}"
FileList="${DefaultFileList}"
Suffixes="${DefaultSuffixes}"
if [ -n "${EPREFIX}" ] ; then
    EPrefix="${EPREFIX}"
else
    EPrefix=
fi
db_file_i386="/etc/rebase.db.i386"
db_file_x86_64="/etc/rebase.db.x86_64"
force_dash_only="no"
case `uname -m` in
    i[3456]86)
	db_file="${db_file_i386}";
	Mach="-4"
	;;
    x86_64)
	Mach="-8"
	db_file="${db_file_x86_64}"
	;;
esac

# Determine platform
Platform=`uname -s`
case $Platform in
 *MINGW*  | *mingw*  ) Platform=mingw  ;;
 *CYGWIN* | *cygwin* ) Platform=cygwin ;;
 *MSYS*   | *msys*   ) Platform=msys   ;;
 * )
    echo "Unsupported platform: $Platform" 1>&2
    exit 1
    ;;
esac

# Parse command line arguments
while getopts "${ProgramOptions}" Option "$@"
do
    case "${Option}" in
    4)
	db_file="${db_file_i386}";
	Mach="-4"
	;;
    8)
	Mach="-8"
	db_file="${db_file_x86_64}"
	;;
    b)
	BaseAddress="${OPTARG}";;
    o)
	Offset="${OPTARG}";;
    p)
	force_dash_only="yes";;
    P)
        EPrefix="${OPTARG}";;
    s)
	Suffixes="${Suffixes}|${OPTARG}";;
    t)
	Touch="-t";;
    T)
	FileList="${OPTARG}";;
    D)
    	ExtraDirList="${OPTARG}";;
    v)
	Verbose="-v";;
    \?)
	usage;;
    esac
done

PATH=$EPrefix/bin:$EPrefix/usr/bin:$EPrefix/sbin:$EPrefix/usr/sbin:/bin

# Verify only ash or dash processes are running
ProcessResult=0
case $Platform in
  mingw|msys )
    /bin/ps -s | /bin/gawk '\
# Count number of running ash or dash. \
/\/bin\/(d)?ash(\.exe)?$/{ ash_cnt++; } \
# Count number of ps and gawk. \
/\/bin\/ps(\.exe)?$/{ cnt++; } \
/\/bin\/gawk(\.exe)?$/{ cnt++; } \
END{ \
  # Uncomment for testing: \
  # printf "TOTAL: %d CNT: %d ASH_CNT: %d\n", NR, cnt, ash_cnt; \
  # Only one of ps and gawk each may run. \
  if (cnt > 2) \
    exit 0; \
  # The total number of allowed processes is one less than the \
  # number of input lines.  The extra line is the ps header output. \
  if (NR - cnt - ash_cnt > 1) \
    exit 0; \
  # All is well. \
  exit 1; \
}'
    ProcessResult=$?
    ;;
  cygwin )
    grep -E -q -i -v '/d?ash(.exe)?$' /proc/[0-9]*/exename
    ProcessResult=$?
    ;;
esac

if [ $ProcessResult -eq 0 -a -z "${RebaseDebug}" ]
then
  if [ $force_dash_only = yes ]
  then
    echo "${ProgramName}: only ash or dash processes are allowed during rebasing"
  else
    echo "${ProgramName}: WARNING: non-ash, non-dash processes present during rebasing"
  fi
  echo "    Exit all Cygwin processes and stop all Cygwin services."
  echo "    Execute ash (or dash) from Start/Run... or a cmd or command window."
  echo "    Execute the rebaseall_pfx script from ash (or dash)."
  echo
  echo "The following processes caused this message:"
  grep -E -i -v '/d?ash(.exe)?$' /proc/[0-9]*/exename
  echo
  if [ $force_dash_only = yes ]
  then
    exit 2
  fi
fi

# Check if rebase database already exists.
database_exists="no"
[ -f "${db_file}" ] && database_exists="yes"

# If BaseAddress has not been specified, and the rebase database doesn't exist
# yet, set BaseAddress to default.
if [ -z "${BaseAddress}" -a "${database_exists}" != "yes" ]
then
  BaseAddress=$DefaultBaseAddress
fi

# Set temp directory
TmpDir="${TMP:-${TEMP:-/tmp}}"

# Validate temp directory
if [ ! -d "$TmpDir" ]
then
    echo "$ProgramName: '$TmpDir' is not a directory"
    exit 2
fi
if [ ! -w "$TmpDir" ]
then
    echo "$ProgramName: '$TmpDir' is not writable"
    exit 2
fi

# Validate user supplied file list, if necessary
if [ -n "$FileList" -a ! -r "$FileList" -a "$FileList" != - ]
then
    echo "$ProgramName: '$FileList' is not readable"
    exit 2
fi

# Validate EPrefix
if [ -z "$EPrefix" ] ; then
    echo "$ProgramName: either set EPREFIX enviornment variable or supply -P argument"
    exit 2
fi

case "${EPrefix}" in
    /*)
        foo=bar # noop
	;;
    *) 
        echo "$ProgramName: EPREFIX must start with '/'"
        exit 2
        ;;
esac

dirlist=

check_dirs() {
    nupath=
    for d in "$@" ; do
        if [ ! -d "$d" ] ; then
            echo "$ProgramName: '$d' is not a directory (ignored)"
            continue
        fi
	if [ x${dirlist} = x ] ; then
	    dirlist="${d}"
        else
            dirlist="${dirlist}:${d}"
        fi
    done
}

check_dirs "${EPrefix}/bin" "${EPrefix}/usr/bin" "${EPrefix}/sbin" "${EPrefix}/usr/sbin" \
		"${EPrefix}"/usr/i686-pc-cygwin1.7/binutils-bin/* \
		"${EPrefix}"/usr/i686-pc-cygwin1.7/gcc-bin/*

		# "${EPrefix}/lib" "${EPrefix}/usr/lib" /usr/lib /usr/bin

PATH="${dirlist}:${PATH}"
export PATH

# Validate ExtraDirList
if [ -n "$ExtraDirList" ]
then
    echo "${ExtraDirList}" | sed 's/:/\n/g' | while read d ; do
        if [ ! -d "${d}" ] ; then
		echo "$ProgramName: '$d' is not a directory"
		exit 7
	fi
    done
    # lol /bin/sh
    if [ $? -eq 7 ] ; then
	    exit 2
    fi
fi

# Set temp file
TmpFile="$TmpDir/rebase.lst"

# Create rebase list
case $Platform in
  cygwin)
    ( if [ -n "${dirlist}" ] ; then echo "${dirlist}" | sed 's/:/\n/g' | while read d ; do
          echo "Scanning \"${d}\"..." >&2
          find "${d}" # -name '*.dll' -o -name '*.so'
      done ; fi
      if [ -n "$ExtraDirList" ] ; then echo "${ExtraDirList}" | sed 's/:/\n/g' | while read d ; do
          echo "Scanning \"${d}\"..." >&2
          find "${d}" -type f # -name '*.dll' -o -name '*.so'
      done ; fi
      echo "Scanning /etc/setup/*/*.lst.gz" >&2
      find /etc/setup -name '*.lst.gz' | xargs gzip -d -c | sed -e 's/^/\//' ) | \
      grep -E "\.($Suffixes)\$" | \
      sed -e '/cygwin1\.dll$/d' -e '/cyglsa.*\.dll$/d' \
	  -e '/d?ash\.exe$/d' -e '/rebase\.exe$/d' \
          -e '/sys-root\/mingw/d' \
	  -e '/ebuild-helpers\/dolib.so$/d' \
	  -e '/ebuild-helpers\/newlib.so$/d' \
	  >"${TmpFile}"
    ;;
  mingw|msys)
    for f in /bin /lib
    do
      find $f -type f |
        grep -E "\.($Suffixes)\$" |
	sed -e '/msys-1\.0.*\.dll$/d' -e '/cygwin1\.dll$/d' \
	    -e '/cyglsa.*\.dll$/d' -e '/d?ash\.exe$/d' \
	    -e '/rebase\.exe$/d' >>"$TmpFile"
    done
    ;;
esac

# Append user supplied file list, if any
if [ -n "${FileList}" ]
then
    cat "${FileList}" >>"${TmpFile}"
fi

if [ -z "${BaseAddress}" ]
then
  rebase "${Verbose}" "${Touch}" -s "${Mach}" -T "${TmpFile}"
else
  rebase "${Verbose}" "${Touch}" -s "${Mach}" -b "${BaseAddress}" -o "${Offset}" -T "${TmpFile}"
fi
ExitCode=$?

# Clean up
cleanup
